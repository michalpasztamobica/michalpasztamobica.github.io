.GS 2 "TERMINAL AND NON-TERMINAL SYMBOLS"

.. code-block:: none


       1 %                              576 <AND opr1>
       2 %FILL                          577 <F1 item>
       3 %LOC                           578 <F2 item>
       4 &                              579 <F3 item>
       5 '$'                            580 <GOTO assignment>
       6 '(/'                           581 <GOTO stmt>
       7 '/)'                           582 <IF clause>
       8 '//'                           583 <IO stmt>
       9 '<'                            584 <OR opr1>
      10 '<<<'                          585 <SYSTEM GOAL SYMBOL>
      11 '=>'                           586 <ac beg>
      12 '>'                            587 <ac end>
      13 '>>>'                          588 <ac item>
      14 (                              589 <ac list>
      15 )                              590 <ac spec>
      16 \*                              591 <acc gang arg>
      17 \*\*                             592 <acc gang args>
      18 +                              593 <acc init attr>
      19 ,                              594 <acc shutdown attr>
      20 -                              595 <accel add opr>
      21 .                              596 <accel attr>
      22 ..                             597 <accel begin>
      23 .AND.                          598 <accel compare dir>
      24 .EQ.                           599 <accel data list>
      25 .EQV.                          600 <accel data name>
      26 .GE.                           601 <accel data ss>
      27 .GT.                           602 <accel data>
      28 .LE.                           603 <accel decl attr>
      29 .LT.                           604 <accel decl begin>
      30 .N.                            605 <accel decl data list>
      31 .NE.                           606 <accel decl data name>
      32 .NEQV.                         607 <accel decl data ss>
      33 .NOT.                          608 <accel decl data>
      34 .O.                            609 <accel decl list>
      35 .OR.                           610 <accel decl sub list>
      36 .X.                            611 <accel decl sub>
      37 .XOR.                          612 <accel dp addexp>
      38 /                              613 <accel dp bnd>
      39 :                              614 <accel dp bndexp1>
      40 ::                             615 <accel dp bndexp>
      41 <END stmt>                     616 <accel dp mulexp>
      42 <Hollerith>                    617 <accel dp sbnd>
      43 <aformat>                      618 <accel dp stmts>
      44 <cmplx comma>                  619 <accel dpdefault attr>
      45 <complex>                      620 <accel dpinit_needed attr>
      46 <dcomplex>                     621 <accel dpinitvar list>
      47 <defined op>                   622 <accel dptype attr>
      48 <dformat>                      623 <accel dpvar bnd>
      49 <dimattr>                      624 <accel dpvar bnds>
      50 <directive>                    625 <accel dpvar>
      51 <dlp>                          626 <accel dpvarlist>
      52 <double>                       627 <accel list>
      53 <dtformat>                     628 <accel mdata list>
      54 <eformat>                      629 <accel mdata name>
      55 <empty file>                   630 <accel mdata ss>
      56 <fformat>                      631 <accel mdata>
      57 <fmtstr>                       632 <accel mdecl data list>
      58 <g0format>                     633 <accel mdecl data name>
      59 <gformat>                      634 <accel mdecl data ss>
      60 <half>                         635 <accel mdecl data>
      61 <id name>                      636 <accel mul opr>
      62 <iformat>                      637 <accel policy attr list>
      63 <implp>                        638 <accel policy attr>
      64 <int kind const>               639 <accel policy declstmt>
      65 <integer>                      640 <accel policy dir>
      66 <iolp>                         641 <accel policy name>
      67 <kanji string>                 642 <accel routine list>
      68 <letter>                       643 <accel sdata list>
      69 <lformat>                      644 <accel sdata name>
      70 <log const>                    645 <accel sdata>
      71 <log kind const>               646 <accel setdev attr>
      72 <mp atomic>                    647 <accel setdev dir>
      73 <mp barrier>                   648 <accel setdev list>
      74 <mp cancel>                    649 <accel shape attr>
      75 <mp cancellationpoint>         650 <accel shape attrs>
      76 <mp critical>                  651 <accel shape declstmt>
      77 <mp declarereduction>          652 <accel shape dir>
      78 <mp declaresimd>               653 <accel short update>
      79 <mp declaretarget>             654 <accel stmt>
      80 <mp distpardo>                 655 <accel sub list>
      81 <mp distpardosimd>             656 <accel sub>
      82 <mp distribute>                657 <accel update attr>
      83 <mp distsimd>                  658 <accel update dir>
      84 <mp doacross>                  659 <accel update list>
      85 <mp dosimd>                    660 <accel wait list>
      86 <mp endatomic>                 661 <access list>
      87 <mp endcritical>               662 <access spec>
      88 <mp enddistpardo>              663 <access>
      89 <mp enddistpardosimd>          664 <accsize>
      90 <mp enddistribute>             665 <accsizelist>
      91 <mp enddistsimd>               666 <addition>
      92 <mp enddosimd>                 667 <addop list>
      93 <mp endmaster>                 668 <addop>
      94 <mp endordered>                669 <aligned clause>
      95 <mp endparallel>               670 <aligned>
      96 <mp endpardo>                  671 <alloc cntl item>
      97 <mp endpardosimd>              672 <alloc cntl list>
      98 <mp endparsections>            673 <alloc cntl>
      99 <mp endparworkshare>           674 <alloc id list>
     100 <mp endpdo>                    675 <alloc id>
     101 <mp endsections>               676 <alloc list>
     102 <mp endsimd>                   677 <alloc obj>
     103 <mp endsingle>                 678 <alloc object>
     104 <mp endtarget>                 679 <alloc type>
     105 <mp endtargetdata>             680 <allocation stmt>
     106 <mp endtargpar>                681 <alt name>
     107 <mp endtargpardo>              682 <arg builtin>
     108 <mp endtargpardosimd>          683 <arg list>
     109 <mp endtargparsimd>            684 <arg>
     110 <mp endtargsimd>               685 <arith IF>
     111 <mp endtargteams>              686 <arith expr>
     112 <mp endtargteamsdist>          687 <arith>
     113 <mp endtargteamsdistpardo>     688 <assigned GOTO>
     114 <mp endtargteamsdistpardosimd> 689  <assignment>
     115 <mp endtargteamsdistsimd>      690 <assoc or selector>
     116 <mp endtask>                   691 <associate stmt>
     117 <mp endtaskgroup>              692 <association list>
     118 <mp endtaskloop>               693 <association>
     119 <mp endtaskloopsimd>           694 <attr list>
     120 <mp endteams>                  695 <attr>
     121 <mp endteamsdist>              696 <base type>
     122 <mp endteamsdistpardo>         697 <begininterface>
     123 <mp endteamsdistpardosimd>     698 <bind attr>
     124 <mp endteamsdistsimd>          699 <bind entry>
     125 <mp endworkshare>              700 <bind list>
     126 <mp flush>                     701 <binding attr list>
     127 <mp master>                    702 <binding attr>
     128 <mp ordered>                   703 <binding name list>
     129 <mp parallel>                  704 <binding name>
     130 <mp pardo>                     705 <block stmt>
     131 <mp pardosimd>                 706 <call>
     132 <mp parsections>               707 <case begin>
     133 <mp parworkshare>              708 <case expr>
     134 <mp pdo>                       709 <case value list>
     135 <mp section>                   710 <case value>
     136 <mp sections>                  711 <case>
     137 <mp simd>                      712 <char expr>
     138 <mp single>                    713 <char literal>
     139 <mp target>                    714 <check construct>
     140 <mp targetdata>                715 <chevron>
     141 <mp targetenterdata>           716 <classdefault stmt>
     142 <mp targetexitdata>            717 <classis stmt>
     143 <mp targetupdate>              718 <cmn ident list>
     144 <mp targpar>                   719 <cmn ident>
     145 <mp targpardo>                 720 <com dcl>
     146 <mp targpardosimd>             721 <common list>
     147 <mp targparsimd>               722 <common>
     148 <mp targsimd>                  723 <computed GOTO>
     149 <mp targteams>                 724 <concatenation>
     150 <mp targteamsdist>             725 <concurrent control>
     151 <mp targteamsdistpardo>        726 <concurrent header>
     152 <mp targteamsdistpardosimd>    727 <concurrent list>
     153 <mp targteamsdistsimd>         728 <concurrent locality>
     154 <mp task>                      729 <concurrent type>
     155 <mp taskgroup>                 730 <conjunction>
     156 <mp taskloop>                  731 <constant>
     157 <mp taskloopsimd>              732 <construct name>
     158 <mp taskwait>                  733 <control stmt>
     159 <mp taskyield>                 734 <cvar ref>
     160 <mp teams>                     735 <cycle stmt>
     161 <mp teamsdist>                 736 <data constant>
     162 <mp teamsdistpardo>            737 <data item>
     163 <mp teamsdistpardosimd>        738 <data rpt>
     164 <mp teamsdistsimd>             739 <data type>
     165 <mp threadprivate>             740 <dcl id list>
     166 <mp workshare>                 741 <dcl id>
     167 <named construct>              742 <dec declaration>
     168 <nformat>                      743 <declaration>
     169 <nonddec const>                744 <declare reduction>
     170 <nondec const>                 745 <declare simd name>
     171 <oformat>                      746 <declare simd>
     172 <qcomplex>                     747 <declare target>
     173 <quad>                         748 <declarered begin>
     174 <quoted string>                749 <defined binary>
     175 <real>                         750 <defined unary>
     176 <red type>                     751 <depend attr>
     177 <underscore>                   752 <depend clause>
     178 <zformat>                      753 <depend data list>
     179 =                              754 <depend data>
     180 A                              755 <derived type spec>
     181 ABSTRACT                       756 <devtype attr>
     182 ACCATOMIC                      757 <devtype list>
     183 ACCATOMICCAPTURE               758 <dflt>
     184 ACCATOMICREAD                  759 <dim beg>
     185 ACCATOMICUPDATE                760 <dim list>
     186 ACCATOMICWRITE                 761 <dim spec>
     187 ACCATTACH                      762 <dimension list>
     188 ACCDATA                        763 <dimkeyword>
     189 ACCDATAREGION                  764 <dinit const list>
     190 ACCDECL                        765 <dinit list>
     191 ACCDETACH                      766 <dinit var list>
     192 ACCDO                          767 <dinit var>
     193 ACCENDATOMIC                   768 <dinit>
     194 ACCENDDATA                     769 <disjunction>
     195 ACCENDDATAREGION               770 <distpardo begin>
     196 ACCENDDO                       771 <distpardosimd begin>
     197 ACCENDHOSTDATA                 772 <distribute begin>
     198 ACCENDKERNDO                   773 <distsimd begin>
     199 ACCENDKERNELS                  774 <do begin>
     200 ACCENDKERNLOOP                 775 <do construct>
     201 ACCENDLOOP                     776 <doacross begin>
     202 ACCENDPARALLEL                 777 <doconcurrent>
     203 ACCENDPARDO                    778 <dosimd begin>
     204 ACCENDPARLOOP                  779 <dowhile>
     205 ACCENDREGION                   780 <dt vlist>
     206 ACCENDSCALAR                   781 <dts>
     207 ACCENDSCALARREGION             782 <dvar ref>
     208 ACCENDSERIAL                   783 <e3>
     209 ACCENDSERIALLOOP               784 <elp>
     210 ACCENTER                       785 <elseif>
     211 ACCEPT                         786 <elsewhere clause>
     212 ACCESS                         787 <encode ctl>
     213 ACCEXIT                        788 <encode spec>
     214 ACCFINALIZE                    789 <encode unit>
     215 ACCHOSTDATA                    790 <end accel attr>
     216 ACCIFPRESENT                   791 <end accel list>
     217 ACCIN                          792 <end interface>
     218 ACCINIT                        793 <end stmt>
     219 ACCKERNELS                     794 <end>
     220 ACCKERNELSDO                   795 <endsingle item>
     221 ACCKERNELSLOOP                 796 <endsingle list>
     222 ACCLOOP                        797 <entity decl list>
     223 ACCOUT                         798 <entity decl>
     224 ACCPARALLELDO                  799 <entity id>
     225 ACCPARALLELLOOP                800 <entry id>
     226 ACCPOLICY                      801 <entry statement>
     227 ACCREGION                      802 <enum>
     228 ACCREGIONDO                    803 <enums>
     229 ACCREGIONLOOP                  804 <equiv group>
     230 ACCSCALAR                      805 <equiv groups>
     231 ACCSCALARREGION                806 <equiv list>
     232 ACCSERIAL                      807 <equiv var>
     233 ACCSERIALLOOP                  808 <eqv or neqv>
     234 ACCSET                         809 <error stop pause>
     235 ACCSHAPE                       810 <error stop stmt>
     236 ACCSHUTDOWN                    811 <etmp e3>
     237 ACCTILE                        812 <etmp exp>
     238 ACCUPDATE                      813 <etmp lp>
     239 ACCUPDATEDEV                   814 <etmp>
     240 ACCUPDATEHOST                  815 <exit stmt>
     241 ACCUPDATEIN                    816 <explicit shape>
     242 ACCUPDATEOUT                   817 <exponentiation>
     243 ACCUPDATESELF                  818 <expression list>
     244 ACCWAIT                        819 <expression>
     245 ACTION                         820 <factor>
     246 ADVANCE                        821 <fcn name>
     247 ALIAS                          822 <ffield>
     248 ALIGN                          823 <fid or nid>
     249 ALIGNED                        824 <field name>
     250 ALLOCATABLE                    825 <field namelist>
     251 ALLOCATE                       826 <final list>
     252 ALWAYS                         827 <final subroutines>
     253 ASSIGN                         828 <final>
     254 ASSIGNMENT                     829 <firstprivate>
     255 ASSOCIATE                      830 <flp>
     256 ASYNC                          831 <forall assn stmt>
     257 ASYNCHRONOUS                   832 <forall begin>
     258 ATTRIBUTES                     833 <forall clause>
     259 AUTO                           834 <forall construct>
     260 AUTOMATIC                      835 <formal list>
     261 B                              836 <formal>
     262 BACKSPACE                      837 <format id>
     263 BIND                           838 <format item>
     264 BLANK                          839 <format list unl>
     265 BLOCK                          840 <format list>
     266 BLOCKDATA                      841 <format stmt>
     267 BN                             842 <format>
     268 BYTE                           843 <func prefix>
     269 BZ                             844 <func suffix>
     270 CACHE                          845 <gangsize2>
     271 CALL                           846 <gangsize3>
     272 CAPTURE                        847 <gangsizes>
     273 CASE                           848 <gen access spec>
     274 CASEDEFAULT                    849 <generic binding list>
     275 CHARACTER                      850 <generic binding name>
     276 CHUNK                          851 <generic binding>
     277 CLASS                          852 <generic name>
     278 CLASSDEFAULT                   853 <generic spec>
     279 CLASSIS                        854 <generic type procedure>
     280 CLOSE                          855 <get module>
     281 COLLAPSE                       856 <id name list>
     282 COMMON                         857 <id>
     283 COMPARE                        858 <idc eq>
     284 COMPLEX                        859 <ident constant>
     285 CONCURRENT                     860 <ident list>
     286 CONSTANT                       861 <ident ssa>
     287 CONTAINS                       862 <ident>
     288 CONTIGUOUS                     863 <ideqc list>
     289 CONTINUE                       864 <if construct>
     290 CONVERT                        865 <ignore tkr>
     291 COPY                           866 <iii>
     292 COPYIN                         867 <implicit list>
     293 COPYOUT                        868 <implicit type>
     294 COPYPRIVATE                    869 <implied do control>
     295 CREATE                         870 <import name list>
     296 CYCLE                          871 <import name>
     297 D                              872 <import>
     298 DATA                           873 <init beg>
     299 DC                             874 <init com dcl>
     300 DEALLOCATE                     875 <input item>
     301 DECIMAL                        876 <input list>
     302 DECLARE                        877 <intent>
     303 DECODE                         878 <interface>
     304 DEFAULT                        879 <intrinsic op>
     305 DEFAULTKIND                    880 <intrinsic type>
     306 DEFAULTMAP                     881 <io spec>
     307 DEFAULT_ASYNC                  882 <kernel begin>
     308 DELETE                         883 <kernel do arg>
     309 DELIM                          884 <kernel do args>
     310 DEPEND                         885 <kernel do block shape>
     311 DEVICE                         886 <kernel do grid shape>
     312 DEVICEID                       887 <kernel do list>
     313 DEVICEPTR                      888 <kernel do nest>
     314 DEVICE_NUM                     889 <kernel do shape>
     315 DEVICE_RESIDENT                890 <kernel shape expr>
     316 DEVICE_TYPE                    891 <kernel shape list>
     317 DIMENSION                      892 <kernel stmt>
     318 DIRECT                         893 <label list>
     319 DISPOSE                        894 <label>
     320 DISTRIBUTE                     895 <lastprivate>
     321 DISTRIBUTEPOINT                896 <launchbound>
     322 DIST_SCHEDULE                  897 <len kind spec>
     323 DO                             898 <len kind>
     324 DOUBLECOMPLEX                  899 <len spec>
     325 DOUBLEPRECISION                900 <linear clause>
     326 DP                             901 <linear expr>
     327 DT                             902 <linear modifier>
     328 E                              903 <linear opt step>
     329 ELEMENTAL                      904 <locality kind>
     330 ELSE                           905 <locality name list>
     331 ELSEIF                         906 <locality spec list>
     332 ELSEWHERE                      907 <locality spec>
     333 EN                             908 <log disjunct>
     334 ENCODE                         909 <log expr>
     335 ENCODING                       910 <log factor>
     336 END                            911 <log negation>
     337 ENDASSOCIATE                   912 <log term>
     338 ENDBLOCK                       913 <loop control>
     339 ENDBLOCKDATA                   914 <map clause>
     340 ENDDO                          915 <map item>
     341 ENDENUM                        916 <map type>
     342 ENDFILE                        917 <mask expr>
     343 ENDFORALL                      918 <module nature>
     344 ENDFUNCTION                    919 <module procedure stmt>
     345 ENDIF                          920 <motion clause>
     346 ENDINTERFACE                   921 <mp atomic begin>
     347 ENDMAP                         922 <mp begin>
     348 ENDMODULE                      923 <mp decl begin>
     349 ENDPROCEDURE                   924 <mp decl>
     350 ENDPROGRAM                     925 <mp stmt>
     351 ENDSELECT                      926 <msattr list>
     352 ENDSTRUCTURE                   927 <msattr>
     353 ENDSUBMODULE                   928 <mult op>
     354 ENDSUBROUTINE                  929 <multiplication>
     355 ENDTYPE                        930 <n eqv op>
     356 ENDUNION                       931 <namelist group>
     357 ENDWHERE                       932 <namelist groups>
     358 ENTRY                          933 <namelist list>
     359 ENUM                           934 <namelist var>
     360 ENUMERATOR                     935 <new factor>
     361 EOR                            936 <new term>
     362 EQUIVALENCE                    937 <nii>
     363 ERR                            938 <nim>
     364 ERRMSG                         939 <nis>
     365 ERRORSTOP                      940 <nowait>
     366 ES                             941 <null stmt>
     367 EXCLUDE                        942 <null>
     368 EXIST                          943 <nullify list>
     369 EXIT                           944 <nullify object>
     370 EXTENDS                        945 <nullify stmt>
     371 EXTERNAL                       946 <only list>
     372 End                            947 <only operator>
     373 F                              948 <only>
     374 FILE                           949 <operator>
     375 FINAL                          950 <opt accel init list>
     376 FIRSTPRIVATE                   951 <opt accel list>
     377 FLUSH                          952 <opt accel shutdown list>
     378 FMT                            953 <opt aif label>
     379 FORALL                         954 <opt atomic type>
     380 FORM                           955 <opt attr list>
     381 FORMAT                         956 <opt attr>
     382 FORMATTED                      957 <opt binding attr list>
     383 FROM                           958 <opt chunk>
     384 FUNCTION                       959 <opt comma>
     385 G                              960 <opt csident>
     386 GANG                           961 <opt derived type spec>
     387 GENERIC                        962 <opt distchunk>
     388 GOTO                           963 <opt end accel list>
     389 GOTOX                          964 <opt endsingle list>
     390 GRAINSIZE                      965 <opt expression>
     391 HOST                           966 <opt gen access spec>
     392 I                              967 <opt ident>
     393 ID                             968 <opt import>
     394 IF                             969 <opt interface name>
     395 IGNORE_TKR                     970 <opt len spec>
     396 IMPLICIT                       971 <opt mask expr>
     397 IMPORT                         972 <opt nowait>
     398 IMPURE                         973 <opt ordered list>
     399 INBRANCH                       974 <opt par ifclause>
     400 INCLUDE                        975 <opt par list>
     401 INDEPENDENT                    976 <opt proc attr>
     402 INIT_NEEDED                    977 <opt red init>
     403 INQUIRE                        978 <opt stride>
     404 INTEGER                        979 <opt sub>
     405 INTENT                         980 <opt tpsl>
     406 INTERFACE                      981 <opt type spec>
     407 INTRINSIC                      982 <opt update list>
     408 IOLENGTH                       983 <opt wait list>
     409 IOMSG                          984 <optional comma>
     410 IOSTAT                         985 <ordered attr>
     411 IS_DEVICE_PTR                  986 <ordered list>
     412 KERNEL                         987 <output item>
     413 KIND                           988 <output list>
     414 L                              989 <par attr>
     415 LASTPRIVATE                    990 <par begin>
     416 LAUNCHBOUNDS                   991 <par ifclause>
     417 LEN                            992 <par list>
     418 LINEAR                         993 <paralleldo begin>
     419 LINK                           994 <parallelsections begin>
     420 LOCAL                          995 <pardosimd begin>
     421 LOCAL_INIT                     996 <parworkshare begin>
     422 LOGICAL                        997 <pause stmt>
     423 MANAGED                        998 <pdo begin>
     424 MAP                            999 <pdt param list>
     425 MERGEABLE                     1000 <pdt param>
     426 MIRROR                        1001 <pdt>
     427 MODULE                        1002 <pflsr list>
     428 MOLD                          1003 <pgi begin>
     429 MOVEDESC                      1004 <pgi compare dir>
     430 MP_MAP                        1005 <pgm>
     431 MP_SCHEDTYPE                  1006 <pointer assignment>
     432 N                             1007 <post seq_cst>
     433 NAME                          1008 <pragma declaration>
     434 NAMED                         1009 <pragma stmt>
     435 NAMELIST                      1010 <pre seq_cst>
     436 NCHARACTER                    1011 <prefix spec>
     437 NEWUNIT                       1012 <prefix>
     438 NEXTREC                       1013 <primary>
     439 NML                           1014 <print spec>
     440 NOGROUP                       1015 <private list>
     441 NOHOST                        1016 <proc attr list>
     442 NONE                          1017 <proc attr>
     443 NON_INTRINSIC                 1018 <proc dcl list>
     444 NOPASS                        1019 <proc dcl>
     445 NOSEQUENCE                    1020 <proc interf>
     446 NOTINBRANCH                   1021 <procedure declaration>
     447 NOWAIT                        1022 <procedure stmt>
     448 NO_CREATE                     1023 <procedure>
     449 NULLIFY                       1024 <prog title>
     450 NUMBER                        1025 <psfunc>
     451 NUM_GANGS                     1026 <ptr assoc>
     452 NUM_TASKS                     1027 <ptr list>
     453 NUM_TEAMS                     1028 <quiet clause>
     454 NUM_THREADS                   1029 <range list>
     455 NUM_WORKERS                   1030 <range>
     456 O                             1031 <read spec2>
     457 OPEN                          1032 <read spec3>
     458 OPENED                        1033 <read spec4>
     459 OPERATOR                      1034 <read>
     460 OPTIONAL                      1035 <record dcl>
     461 OPTIONS                       1036 <record list>
     462 ORDERED                       1037 <record namelist>
     463 P                             1038 <record>
     464 PAD                           1039 <red comb>
     465 PARALLEL                      1040 <reduc op>
     466 PARAMETER                     1041 <reduction>
     467 PASS                          1042 <reflabel>
     468 PAUSE                         1043 <rel operand>
     469 PCOPY                         1044 <relation>
     470 PCOPYIN                       1045 <relop>
     471 PCOPYOUT                      1046 <rename list>
     472 PCREATE                       1047 <rename operator>
     473 PDELETE                       1048 <rename>
     474 PENDING                       1049 <repeat factor>
     475 PGICOMPARE                    1050 <return>
     476 PINNED                        1051 <routine id list>
     477 PLOCAL                        1052 <routine id>
     478 PNOT                          1053 <save id>
     479 POINTER                       1054 <save list>
     480 POS                           1055 <scale factor>
     481 POSITION                      1056 <sched type>
     482 PREFETCH                      1057 <schedule>
     483 PRESENT                       1058 <sections begin>
     484 PRINT                         1059 <select type stmt>
     485 PRIORITY                      1060 <seq cst>
     486 PRIVATE                       1061 <seq>
     487 PROCEDURE                     1062 <simd begin>
     488 PROC_BIND                     1063 <simple stmt>
     489 PROGRAM                       1064 <single begin>
     490 PROTECTED                     1065 <smp stmt>
     491 PUBLIC                        1066 <spec item>
     492 PURE                          1067 <spec list>
     493 Q                             1068 <ssa list>
     494 QUIET                         1069 <ssa>
     495 RC                            1070 <star repeat>
     496 RD                            1071 <statement>
     497 READ                          1072 <stbeg>
     498 READONLY                      1073 <stend>
     499 READWRITE                     1074 <stmt>
     500 REAL                          1075 <stop pause>
     501 REC                           1076 <stop stmt>
     502 RECL                          1077 <struct begin1>
     503 RECORD                        1078 <struct begin2>
     504 RECURSIVE                     1079 <struct name>
     505 REDUCTION                     1080 <subr prefix>
     506 REFLECTED                     1081 <substring>
     507 RETURN                        1082 <target begin>
     508 REWIND                        1083 <target list>
     509 RN                            1084 <target>
     510 ROUND                         1085 <targetdata begin>
     511 ROUTINE                       1086 <targetenterdata begin>
     512 RP                            1087 <targetexitdata begin>
     513 RU                            1088 <targetupdate begin>
     514 RZ                            1089 <targpar begin>
     515 S                             1090 <targpardo begin>
     516 SAFELEN                       1091 <targpardosimd begin>
     517 SAVE                          1092 <targparsimd begin>
     518 SCHEDULE                      1093 <targsimd begin>
     519 SELECTCASE                    1094 <targteams begin>
     520 SELECTTYPE                    1095 <targteamsdist begin>
     521 SELF                          1096 <targteamsdistpardo begin>
     522 SEQ                           1097 <targteamsdistpardosimd begin>
     523 SEQUENCE                      1098 <targteamsdistsimd begin>
     524 SEQUENTIAL                    1099 <task begin>
     525 SEQ_CST                       1100 <taskloop begin>
     526 SHARED                        1101 <taskloopsimd begin>
     527 SHORTLOOP                     1102 <teams begin>
     528 SIGN                          1103 <teamsdist begin>
     529 SIMD                          1104 <teamsdistpardo begin>
     530 SIMDLEN                       1105 <teamsdistpardosimd begin>
     531 SIZE                          1106 <teamsdistsimd begin>
     532 SOURCE                        1107 <term>
     533 SP                            1108 <tkr id list>
     534 SS                            1109 <tkr id>
     535 STAT                          1110 <tkr spec>
     536 STATIC                        1111 <tp item>
     537 STATUS                        1112 <tp list>
     538 STOP                          1113 <tprocedure>
     539 STREAM                        1114 <tpv>
     540 STRUCTURE                     1115 <typdcl item>
     541 SUBMODULE                     1116 <typdcl list>
     542 SUBROUTINE                    1117 <type attr list>
     543 T                             1118 <type attr>
     544 TARGET                        1119 <type bound procedure>
     545 TCONTAINS                     1120 <type guard stmt>
     546 TEXTURE                       1121 <type list>
     547 THEN                          1122 <type name>
     548 THREADS                       1123 <type param decl list>
     549 THREAD_LIMIT                  1124 <type param spec list>
     550 TL                            1125 <type param value>
     551 TO                            1126 <type spec>
     552 TPROCEDURE                    1127 <typeis stmt>
     553 TR                            1128 <typespec>
     554 TYPE                          1129 <uniform clause>
     555 TYPEIS                        1130 <unit data list>
     556 UNFORMATTED                   1131 <unit data>
     557 UNIFORM                       1132 <unit id>
     558 UNION                         1133 <unit info>
     559 UNIT                          1134 <unlimited format item>
     560 UNROLL                        1135 <use>
     561 UNTIED                        1136 <var primary ssa>
     562 UPDATE                        1137 <var primary>
     563 USE                           1138 <var ref list>
     564 USE_DEVICE                    1139 <var ref>
     565 VALUE                         1140 <vol id>
     566 VECTOR                        1141 <vol list>
     567 VECTOR_LENGTH                 1142 <vxeqc list>
     568 VOLATILE                      1143 <wait item>
     569 WAIT                          1144 <where clause>
     570 WHERE                         1145 <where construct>
     571 WHILE                         1146 <write>
     572 WORKER
     573 WRITE
     574 X
     575 Z

.GS 2 "THE PRODUCTIONS"

.. code-block:: none


       0 <SYSTEM GOAL SYMBOL> ::= END <stmt> END

       1 <stmt> ::= <stbeg> <statement> <stend>

       2 <stbeg> ::=

       3 <stend> ::=

       4 <statement> ::= <prog title>
       5               | <nii> <nim> <entry statement>
       6               | <declaration>
       7               | <nii> <nim> <simple stmt>
       8               | <nii> <nim> <GOTO stmt>
       9               | <nii> <nim> <control stmt>
      10               | <nii> <nim> <block stmt>
      11               | <nii> <nim> <format stmt>
      12               | <null stmt>
      13               | <end> <end stmt>
      14               | <empty file>
      15               | INCLUDE <quoted string>
      16               | <nii> <nim> OPTIONS
      17               | <nis> <nii> CONTAINS
      18               | <directive>

      19 <iii> ::=

      20 <nii> ::=

      21 <nim> ::=

      22 <pgm> ::=

      23 <end> ::=

      24 <prog title> ::= <routine id>
      25                | <routine id> ( ) <func suffix>
      26                | <routine id> ( <formal list> ) <func suffix>
      27                | BLOCKDATA
      28                | BLOCKDATA <id>
      29                | MODULE <id>
      30                | SUBMODULE ( <id> ) <id>
      31                | SUBMODULE ( <id> : <id> ) <id>
      32                | <module procedure stmt>

      33 <ident> ::= <id>

      34 <id> ::= <id name>

      35 <func suffix> ::=
      36                 | BIND <bind attr> <id name> ( <id name> )
      37                 | BIND <bind attr>
      38                 | <id name> ( <id name> ) BIND <bind attr>
      39                 | <id name> ( <id name> )

      40 <entry statement> ::= <entry id>
      41                     | <entry id> ( ) <func suffix>
      42                     | <entry id> ( <formal list> ) <func suffix>

      43 <routine id> ::= <subr prefix> SUBROUTINE <id>
      44                | <subr prefix> FUNCTION <id>
      45                | <func prefix> FUNCTION <fcn name>
      46                | PROGRAM <id>

      47 <subr prefix> ::=
      48                 | <prefix spec>

      49 <prefix spec> ::= <prefix spec> <prefix>
      50                 | <prefix>

      51 <prefix> ::= RECURSIVE
      52            | PURE
      53            | ELEMENTAL
      54            | ATTRIBUTES ( <id name list> )
      55            | IMPURE
      56            | MODULE
      57            | LAUNCHBOUNDS ( <launchbound> )
      58            | LAUNCHBOUNDS ( <launchbound> , <launchbound> )

      59 <launchbound> ::= <integer>

      60 <id name list> ::= <id name list> , <id name>
      61                  | <id name>

      62 <func prefix> ::= <data type>
      63                 | <data type> <prefix spec>
      64                 | <prefix spec> <data type>
      65                 | <prefix spec> <data type> <prefix spec>

      66 <entry id> ::= ENTRY <id>

      67 <fcn name> ::= <id> <opt len spec>

      68 <formal list> ::= <formal list> , <formal>
      69                 | <formal>

      70 <formal> ::= <id>
      71            | \*

      72 <ident list> ::= <ident list> , <ident>
      73                | <ident>

      74 <end stmt> ::= <END stmt>
      75              | ENDBLOCKDATA <opt ident>
      76              | ENDFUNCTION <opt ident>
      77              | ENDMODULE <opt ident>
      78              | ENDPROGRAM <opt ident>
      79              | ENDSUBROUTINE <opt ident>
      80              | ENDSUBMODULE <opt ident>
      81              | ENDPROCEDURE <opt ident>

      82 <opt ident> ::=
      83               | <ident>

      84 <block stmt> ::= BLOCK
      85                | <check construct> : BLOCK
      86                | ENDBLOCK <construct name>

      87 <declaration> ::= <data type> <optional comma> <pgm>
                              <typdcl list>
      88                 | <dimkeyword> <opt attr> <pgm> <dcl id list>
      89                 | <nis> IMPLICIT <pgm> <implicit type>
      90                 | <nis> COMMON <pgm> <common list>
      91                 | <nis> EXTERNAL <opt attr> <pgm> <ident list>
      92                 | <nis> INTRINSIC <opt attr> <pgm> <ident list>
      93                 | <iii> <nis> SAVE <opt attr> <save list>
      94                 | <iii> <nis> SAVE
      95                 | PARAMETER <pgm> ( <ideqc list> )
      96                 | <nis> EQUIVALENCE <pgm> <equiv groups>
      97                 | <iii> <nis> DATA <dinit list>
      98                 | PARAMETER <pgm> <vxeqc list>
      99                 | <iii> <nis> NAMELIST <namelist groups>
     100                 | STRUCTURE <pgm> <struct begin1> <struct begin2>
     101                 | ENDSTRUCTURE
     102                 | RECORD <pgm> <record list>
     103                 | UNION
     104                 | ENDUNION
     105                 | MAP
     106                 | ENDMAP
     107                 | TYPE <opt type spec> <opt attr> <pgm> <id>
                              <opt tpsl>
     108                 | ENDTYPE <opt ident>
     109                 | VOLATILE <opt attr> <pgm> <vol list>
     110                 | <nis> POINTER <opt attr> <pgm> <ptr list>
     111                 | <nis> ALLOCATABLE <opt attr> <pgm>
                              <alloc id list>
     112                 | <data type> <opt attr list> :: <pgm>
                              <entity decl list>
     113                 | <intent> <opt attr> <pgm> <ident list>
     114                 | <access spec> <opt attr> <pgm> <access list>
     115                 | OPTIONAL <opt attr> <pgm> <ident list>
     116                 | TARGET <opt attr> <pgm> <target list>
     117                 | <nis> <interface>
     118                 | <nis> <end interface>
     119                 | <nis> <pgm> USE <use>
     120                 | <access spec>
     121                 | <procedure stmt>
     122                 | <mp threadprivate> ( <tp list> )
     123                 | <dec declaration>
     124                 | <pragma declaration>
     125                 | <nis> AUTOMATIC <opt attr> <pgm> <ident list>
     126                 | <nis> STATIC <opt attr> <pgm> <ident list>
     127                 | BIND <bind attr> <opt attr> <bind list>
     128                 | <nis> <pgm> <import> <opt import>
     129                 | <nis> <pgm> ENUM , BIND ( <id name> )
     130                 | <nis> ENUMERATOR <opt attr> <enums>
     131                 | <nis> ENDENUM
     132                 | <procedure declaration>
     133                 | <type bound procedure>
     134                 | ATTRIBUTES ( <id name list> ) <opt attr> <pgm>
                              <ident list>
     135                 | TCONTAINS
     136                 | <nis> PROTECTED <opt attr> <pgm> <ident list>
     137                 | <nis> ASYNCHRONOUS <opt attr> <pgm>
                              <ident list>
     138                 | <nis> <accel decl begin> ACCDECL
                              <accel decl list>
     139                 | <nis> <accel decl begin> DECLARE
                              <accel decl list>
     140                 | <generic type procedure>
     141                 | <final subroutines>
     142                 | <nis> CONTIGUOUS <opt attr> <pgm> <ident list>
     143                 | <nis> <accel decl begin> ROUTINE
                              <accel routine list>
     144                 | <nis> <accel decl begin> ROUTINE (
                              <routine id list> ) <accel routine list>
     145                 | <seq> <pgm>
     146                 | <nis> <mp decl begin> <mp decl>
     147                 | <nis> VALUE <opt attr> <pgm> <ident list>
     148                 | <accel begin> <accel dp stmts>

     149 <accel dp stmts> ::= <accel shape declstmt>
     150                    | <accel policy declstmt>

     151 <accel shape declstmt> ::= ACCSHAPE <accel shape dir>

     152 <accel shape dir> ::= ( <accel dpvarlist> )
     153                     | ( <accel dpvarlist> ) <accel shape attrs>
     154                     | '<' <ident> '>' ( <accel dpvarlist> )
     155                     | '<' <ident> '>' ( <accel dpvarlist> )
                                  <accel shape attrs>

     156 <accel shape attrs> ::= <accel shape attrs> <accel shape attr>
     157                       | <accel shape attr>

     158 <accel shape attr> ::= <accel dpdefault attr>
     159                      | <accel dpinit_needed attr>
     160                      | <accel dptype attr>

     161 <accel dpdefault attr> ::= DEFAULT ( <ident> )

     162 <accel dpinit_needed attr> ::= INIT_NEEDED (
                                           <accel dpinitvar list> )

     163 <accel dpinitvar list> ::= <accel dpinitvar list> , <ident>
     164                          | <ident>

     165 <accel dptype attr> ::= TYPE ( <ident> )

     166 <accel policy declstmt> ::= ACCPOLICY <accel policy name>
                                        <accel policy dir>

     167 <accel policy name> ::= '<' <ident> '>'
     168                       | '<' <ident> : <ident> '>'

     169 <accel policy dir> ::= <accel policy attr list>

     170 <accel policy attr list> ::= <accel policy attr list>
                                         <accel policy attr>
     171                            | <accel policy attr>

     172 <accel policy attr> ::= CREATE ( <accel dpvarlist> )
     173                       | NO_CREATE ( <accel dpvarlist> )
     174                       | COPYIN ( <accel dpvarlist> )
     175                       | COPYOUT ( <accel dpvarlist> )
     176                       | COPY ( <accel dpvarlist> )
     177                       | UPDATE ( <accel dpvarlist> )
     178                       | DEVICEPTR ( <accel dpvarlist> )
     179                       | <accel dpdefault attr>
     180                       | <accel dptype attr>

     181 <accel dpvarlist> ::= <accel dpvarlist> , <accel dpvar>
     182                     | <accel dpvar>

     183 <accel dpvar> ::= <ident>
     184                 | <ident> '<' <ident> '>'
     185                 | <ident> ( <accel dpvar bnds> )
     186                 | <ident> '<' <ident> '>' ( <accel dpvar bnds> )

     187 <accel dpvar bnds> ::= <accel dpvar bnds> , <accel dpvar bnd>
     188                      | <accel dpvar bnd>

     189 <accel dpvar bnd> ::= <accel dp bnd> : <accel dp bnd>
     190                     | <accel dp bnd>

     191 <accel dp bnd> ::= <accel dp sbnd>
     192                  | <accel dp bndexp>
     193                  | <accel dp bndexp1>

     194 <accel dp bndexp> ::= <accel dp addexp>
     195                     | <accel dp mulexp>

     196 <accel dp addexp> ::= <accel dp sbnd> <accel add opr>
                                  <accel dp sbnd>

     197 <accel dp mulexp> ::= <accel dp sbnd> <accel mul opr>
                                  <accel dp sbnd>

     198 <accel add opr> ::= +
     199                   | -

     200 <accel mul opr> ::= \*
     201                   | /

     202 <accel dp bndexp1> ::= <accel dp mulexp> <accel add opr>
                                   <accel dp sbnd>

     203 <accel dp sbnd> ::= <constant>
     204                   | <ident>

     205 <routine id list> ::= <ident>
     206                     | <routine id list> , <ident>

     207 <dimkeyword> ::= DIMENSION
     208                | <dimattr>

     209 <nis> ::=

     210 <data type> ::= <base type> <opt len spec>
     211               | <base type> ( <len kind> )
     212               | TYPE ( <id> <opt derived type spec> )
     213               | CLASS <pgm> ( <id> <opt derived type spec> )
     214               | CLASS <pgm> ( \* )

     215 <type spec> ::= <intrinsic type>
     216               | <ident>

     217 <intrinsic type> ::= <base type> <opt len spec>
     218                    | <base type> ( <len kind> )

     219 <base type> ::= INTEGER
     220               | REAL
     221               | DOUBLEPRECISION
     222               | COMPLEX
     223               | DOUBLECOMPLEX
     224               | LOGICAL
     225               | CHARACTER
     226               | NCHARACTER
     227               | BYTE

     228 <opt len spec> ::=
     229                  | \* <len spec>
     230                  | : <len spec>

     231 <len spec> ::= <integer>
     232              | ( <tpv> )

     233 <tpv> ::= <expression>
     234         | \*
     235         | :

     236 <len kind> ::= <tpv>
     237              | <len kind spec>
     238              | <tpv> , <len kind spec>
     239              | <tpv> , <tpv>
     240              | <len kind spec> , <len kind spec>

     241 <len kind spec> ::= <id name> = <tpv>

     242 <optional comma> ::=
     243                    | ,

     244 <opt attr> ::=
     245              | ::

     246 <typdcl list> ::= <typdcl list> , <typdcl item>
     247                 | <typdcl item>

     248 <typdcl item> ::= <dcl id> / <dinit const list> /
     249                 | <dcl id>
     250                 | %FILL

     251 <dcl id list> ::= <dcl id list> , <dcl id>
     252                 | <dcl id>

     253 <dcl id> ::= <ident> <opt len spec>
     254            | <ident> <opt len spec> <dim beg> <dimension list> )
                         <opt len spec>

     255 <dim beg> ::= (

     256 <dimension list> ::= <dim list>

     257 <dim list> ::= <dim list> , <dim spec>
     258              | <dim spec>

     259 <dim spec> ::= <explicit shape>
     260              | <expression> : \*
     261              | \*
     262              | :
     263              | <expression> :
     264              | ..

     265 <explicit shape> ::= <expression> : <expression>
     266                    | <expression>

     267 <implicit type> ::= <implicit list>
     268                   | NONE

     269 <implicit list> ::= <implicit list> , <data type> <implp>
                                <range list> )
     270                   | <data type> <implp> <range list> )

     271 <range list> ::= <range list> , <range>
     272                | <range>

     273 <range> ::= <letter> - <letter>
     274           | <letter>

     275 <common list> ::= <common list> <com dcl>
     276                 | <init com dcl>

     277 <init com dcl> ::= <dcl id list>
     278                  | <dcl id list> ,
     279                  | <com dcl>

     280 <com dcl> ::= '//' <dcl id list> <optional comma>
     281             | / / <dcl id list> <optional comma>
     282             | <common> <dcl id list> <optional comma>

     283 <common> ::= / <ident> /

     284 <save list> ::= <save list> , <save id>
     285               | <save id>

     286 <save id> ::= <common>
     287             | <ident>

     288 <ideqc list> ::= <ideqc list> , <ident> <init beg> <expression>
     289                | <ident> <init beg> <expression>

     290 <init beg> ::= =

     291 <vxeqc list> ::= <vxeqc list> , <ident> = <expression>
     292                | <ident> = <expression>

     293 <enums> ::= <enums> , <enum>
     294           | <enum>

     295 <enum> ::= <ident> = <expression>
     296          | <ident>

     297 <equiv groups> ::= <equiv groups> , <equiv group>
     298                  | <equiv group>

     299 <equiv group> ::= ( <equiv list> )

     300 <equiv list> ::= <equiv list> , <equiv var>
     301                | <equiv var>

     302 <equiv var> ::= <ident>
     303               | <equiv var> ( <ssa list> )
     304               | <equiv var> . <ident>

     305 <namelist groups> ::= <namelist groups> <namelist group>
     306                     | <namelist group>

     307 <namelist group> ::= / <ident> / <namelist list>

     308 <namelist list> ::= <namelist list> <namelist var>
     309                   | <namelist var>

     310 <namelist var> ::= <ident> <optional comma>

     311 <struct begin1> ::=
     312                   | / <ident> /

     313 <struct begin2> ::=
     314                   | <field namelist>

     315 <field namelist> ::= <field namelist> , <field name>
     316                    | <field name>

     317 <field name> ::= <ident>
     318                | <ident> <dim beg> <dimension list> )

     319 <record list> ::= <record list> <record>
     320                 | <record>

     321 <record> ::= / <struct name> / <record namelist>

     322 <struct name> ::= <ident>

     323 <record namelist> ::= <record namelist> <record dcl>
     324                     | <record dcl>

     325 <record dcl> ::= <ident> <optional comma>
     326                | <ident> <dim beg> <dimension list> )
                             <optional comma>

     327 <vol list> ::= <vol list> , <vol id>
     328              | <vol id>

     329 <vol id> ::= <common>
     330            | <ident>

     331 <dinit list> ::= <dinit list> <optional comma> <dinit>
     332                | <dinit>

     333 <dinit> ::= <dinit var list> / <dinit const list> /

     334 <dinit var list> ::= <dinit var list> , <dinit var>
     335                    | <dinit var>

     336 <dinit var> ::= <dvar ref>
     337               | ( <dinit var list> , <ident> = <expression> ,
                            <expression> <e3> )

     338 <e3> ::=
     339        | , <expression>

     340 <dinit const list> ::= <dinit const list> , <data item>
     341                      | <data item>

     342 <data item> ::= <data constant>
     343               | <data rpt> \* <data constant>

     344 <data rpt> ::= <integer>
     345              | <int kind const>
     346              | <ident constant>

     347 <data constant> ::= <constant>
     348                   | <addop> <constant>
     349                   | <ident constant>
     350                   | <addop> <ident constant>
     351                   | <ident ssa> ( <ssa list> )
     352                   | <ident ssa> ( )
     353                   | <substring>

     354 <ident ssa> ::= <ident>

     355 <ident constant> ::= <ident>

     356 <ptr list> ::= <ptr list> , <ptr assoc>
     357              | <ptr assoc>

     358 <ptr assoc> ::= ( <ident> , <dcl id> )
     359               | <alloc id>

     360 <alloc id list> ::= <alloc id list> , <alloc id>
     361                   | <alloc id>

     362 <alloc id> ::= <ident>
     363              | <ident> <dim beg> <dimension list> )

     364 <opt attr list> ::=
     365                   | , <attr list>

     366 <attr list> ::= <attr list> , <attr>
     367               | <attr>

     368 <attr> ::= PARAMETER
     369          | <access spec>
     370          | ALLOCATABLE
     371          | <dimattr> <dim beg> <dimension list> )
     372          | EXTERNAL
     373          | <intent>
     374          | INTRINSIC
     375          | OPTIONAL
     376          | POINTER
     377          | SAVE
     378          | TARGET
     379          | AUTOMATIC
     380          | STATIC
     381          | BIND <bind attr>
     382          | VALUE
     383          | VOLATILE
     384          | DEVICE
     385          | PINNED
     386          | SHARED
     387          | CONSTANT
     388          | PROTECTED
     389          | ASYNCHRONOUS
     390          | ABSTRACT
     391          | TEXTURE
     392          | KIND
     393          | LEN
     394          | CONTIGUOUS
     395          | MANAGED

     396 <bind attr> ::= ( <id name> )
     397               | ( <id name> , <id name> = <quoted string> )

     398 <bind list> ::= <bind list> , <bind entry>
     399               | <bind entry>

     400 <bind entry> ::= <common>
     401                | <id>

     402 <opt type spec> ::=
     403                   | , <type attr list>

     404 <type attr list> ::= <type attr list> , <type attr>
     405                    | <type attr>

     406 <type attr> ::= BIND <bind attr>
     407               | <access spec>
     408               | EXTENDS ( <id> )
     409               | ABSTRACT

     410 <access spec> ::= PUBLIC
     411                 | PRIVATE

     412 <access list> ::= <access list> , <access>
     413                 | <access>

     414 <access> ::= <ident>
     415            | <id name> ( <operator> )
     416            | <id name> ( = )

     417 <seq> ::= SEQUENCE
     418         | NOSEQUENCE

     419 <intent> ::= INTENT ( <id name> )
     420            | INTENT ( <id name> <id name> )

     421 <entity decl list> ::= <entity decl list> , <entity decl>
     422                      | <entity decl>

     423 <entity decl> ::= <entity id>
     424                 | <entity id> <init beg> <expression>
     425                 | <entity id> '=>' <id> ( )

     426 <entity id> ::= <ident> <opt len spec>
     427               | <ident> <opt len spec> <dim beg> <dimension list>
                            ) <opt len spec>

     428 <target list> ::= <target list> , <target>
     429                 | <target>

     430 <target> ::= <dcl id>

     431 <interface> ::= <begininterface>
     432               | <begininterface> <generic spec>

     433 <begininterface> ::= <pgm> INTERFACE
     434                    | <pgm> ABSTRACT INTERFACE

     435 <generic spec> ::= <generic name>
     436                  | OPERATOR ( <operator> )
     437                  | ASSIGNMENT ( = )

     438 <generic name> ::= <ident>
     439                  | OPERATOR
     440                  | ASSIGNMENT
     441                  | <ident> ( <ident> )

     442 <operator> ::= <intrinsic op>
     443              | . <ident> .
     444              | <defined op>

     445 <intrinsic op> ::= <addop>
     446                  | <mult op>
     447                  | \*\*
     448                  | <n eqv op>
     449                  | .OR.
     450                  | .O.
     451                  | .AND.
     452                  | .NOT.
     453                  | .N.
     454                  | <relop>
     455                  | '//'

     456 <n eqv op> ::= .EQV.
     457              | .NEQV.
     458              | .X.
     459              | .XOR.

     460 <end interface> ::= ENDINTERFACE
     461                   | ENDINTERFACE <generic spec>

     462 <module procedure stmt> ::= MODULE PROCEDURE <ident list>
     463                           | MODULE PROCEDURE :: <ident list>

     464 <procedure stmt> ::= PROCEDURE <ident list>
     465                    | PROCEDURE :: <ident list>

     466 <use> ::= <get module>
     467         | <get module> , <rename list>
     468         | <get module> , <id name> : <only list>
     469         | <get module> , <id name> :

     470 <get module> ::= <id>
     471                | , <module nature> :: <id>
     472                | :: <id>

     473 <module nature> ::= INTRINSIC
     474                   | NON_INTRINSIC

     475 <rename list> ::= <rename list> , <rename>
     476                 | <rename>

     477 <rename> ::= <ident> '=>' <ident>
     478            | <id name> ( <rename operator> ) '=>' <id name> (
                         <rename operator> )

     479 <rename operator> ::= . <ident> .
     480                     | <defined op>

     481 <only list> ::= <only list> , <only>
     482               | <only>

     483 <only> ::= <ident>
     484          | <ident> '=>' <ident>
     485          | <id name> ( <only operator> )
     486          | <id name> ( = )

     487 <only operator> ::= <intrinsic op>
     488                   | . <ident> .
     489                   | <defined op>

     490 <tp list> ::= <tp list> , <tp item>
     491             | <tp item>

     492 <tp item> ::= <common>
     493             | <ident>

     494 <dec declaration> ::= ATTRIBUTES <msattr list> ::
                                  <cmn ident list>
     495                     | ALIAS <ident> , <alt name>
     496                     | ALIAS <ident> : <alt name>

     497 <msattr list> ::= <msattr list> , <msattr>
     498                 | <msattr>

     499 <msattr> ::= <id name>
     500            | <id name> : <alt name>

     501 <alt name> ::= <quoted string>
     502              | <id name>

     503 <cmn ident list> ::= <cmn ident list> , <cmn ident>
     504                    | <cmn ident>

     505 <cmn ident> ::= <common>
     506               | <ident>

     507 <pragma declaration> ::= <nis> LOCAL ( <ident list> )
     508                        | <nis> <ignore tkr>
     509                        | <nis> DEFAULTKIND <dflt>
     510                        | <nis> MOVEDESC <id name>

     511 <ignore tkr> ::= IGNORE_TKR
     512                | IGNORE_TKR <tkr id list>

     513 <tkr id list> ::= <tkr id list> , <tkr id>
     514                 | <tkr id>

     515 <tkr id> ::= <tkr spec> <ident>

     516 <tkr spec> ::=
     517              | ( <id name> )

     518 <dflt> ::=
     519          | ( <ident list> )

     520 <import> ::= IMPORT

     521 <opt import> ::=
     522                | <opt attr> <import name list>

     523 <import name list> ::= <import name list> , <import name>
     524                      | <import name>

     525 <import name> ::= <ident>

     526 <procedure declaration> ::= <procedure> <opt attr>
                                        <proc dcl list>

     527 <procedure> ::= PROCEDURE ( <proc interf> ) <opt proc attr>

     528 <proc interf> ::=
     529                 | <id>
     530                 | <data type>

     531 <opt proc attr> ::=
     532                   | , <proc attr list>

     533 <proc attr list> ::= <proc attr list> , <proc attr>
     534                    | <proc attr>

     535 <proc attr> ::= <access spec>
     536               | BIND <bind attr>
     537               | <intent>
     538               | OPTIONAL
     539               | POINTER
     540               | SAVE
     541               | PASS
     542               | PASS ( <ident> )
     543               | NOPASS
     544               | PROTECTED

     545 <proc dcl list> ::= <proc dcl list> , <proc dcl>
     546                   | <proc dcl>

     547 <proc dcl> ::= <ident>
     548              | <ident> '=>' <id> ( )
     549              | <ident> '=>' <id>

     550 <type bound procedure> ::= <tprocedure> <opt attr>
                                       <binding name list>

     551 <tprocedure> ::= TPROCEDURE <opt interface name>
                             <opt binding attr list>

     552 <opt interface name> ::=
     553                        | ( <id> )

     554 <opt binding attr list> ::=
     555                           | , <binding attr list>

     556 <binding attr list> ::= <binding attr list> , <binding attr>
     557                       | <binding attr>

     558 <binding attr> ::= <id name>
     559                  | <id name> ( <id> )

     560 <binding name list> ::= <binding name list> , <binding name>
     561                       | <binding name>

     562 <binding name> ::= <id>
     563                  | <id> '=>' <id>

     564 <accel decl begin> ::=

     565 <accel decl list> ::= <accel decl list> <opt comma>
                                  <accel decl attr>
     566                     | <accel decl attr>

     567 <accel decl attr> ::= COPYIN ( <accel decl data list> )
     568                     | COPYOUT ( <accel decl data list> )
     569                     | LOCAL ( <accel decl data list> )
     570                     | COPY ( <accel decl data list> )
     571                     | MIRROR ( <accel mdecl data list> )
     572                     | REFLECTED ( <accel mdecl data list> )
     573                     | CREATE ( <accel decl data list> )
     574                     | PRESENT ( <accel decl data list> )
     575                     | PCOPY ( <accel decl data list> )
     576                     | PCOPYIN ( <accel decl data list> )
     577                     | PCOPYOUT ( <accel decl data list> )
     578                     | PLOCAL ( <accel decl data list> )
     579                     | PCREATE ( <accel decl data list> )
     580                     | DEVICEPTR ( <accel mdecl data list> )
     581                     | DEVICE_RESIDENT ( <accel decl data list> )
     582                     | LINK ( <accel decl data list> )

     583 <accel decl data list> ::= <accel decl data list> ,
                                       <accel decl data>
     584                          | <accel decl data>

     585 <accel decl data> ::= <accel decl data name> (
                                  <accel decl sub list> )
     586                     | <accel decl data name>
     587                     | <constant>
     588                     | <common>

     589 <accel mdecl data> ::= <accel mdecl data name> (
                                   <accel decl sub list> )
     590                      | <accel mdecl data name>
     591                      | <constant>

     592 <accel mdecl data list> ::= <accel mdecl data list> ,
                                        <accel mdecl data>
     593                           | <accel mdecl data>

     594 <accel decl sub list> ::= <accel decl sub list> ,
                                      <accel decl sub>
     595                         | <accel decl sub>

     596 <accel decl sub> ::= <opt sub> : <opt sub>
     597                    | <expression>

     598 <accel routine list> ::=
     599                        | <accel routine list> <opt comma> GANG
     600                        | <accel routine list> <opt comma> WORKER
     601                        | <accel routine list> <opt comma> VECTOR
     602                        | <accel routine list> <opt comma> SEQ
     603                        | <accel routine list> <opt comma> NOHOST
     604                        | <accel routine list> <opt comma> BIND (
                                     <ident> )
     605                        | <accel routine list> <opt comma> BIND (
                                     <quoted string> )
     606                        | <accel routine list> <opt comma>
                                     DEVICE_TYPE ( <devtype list> )
     607                        | <accel routine list> <opt comma> GANG (
                                     <ident> : <expression> )
     608                        | <accel routine list> <opt comma> EXCLUDE

     609 <devtype list> ::= <devtype list> , <devtype attr>
     610                  | <devtype attr>

     611 <devtype attr> ::= \*
     612                  | <ident>

     613 <generic type procedure> ::= GENERIC <opt gen access spec> ::
                                         <generic binding>

     614 <opt gen access spec> ::=
     615                         | , <gen access spec>

     616 <gen access spec> ::= <id name>

     617 <generic binding> ::= <generic spec> '=>' <generic binding list>

     618 <generic binding name> ::= <id>

     619 <generic binding list> ::= <generic binding name>
     620                          | <generic binding list> ,
                                       <generic binding name>

     621 <final subroutines> ::= FINAL <opt attr> <final list>

     622 <final list> ::= <final list> , <final>
     623                | <final>

     624 <final> ::= <id>

     625 <opt tpsl> ::=
     626              | ( <type param spec list> )

     627 <type param spec list> ::= <type param spec list> , <id>
     628                          | <id>

     629 <opt derived type spec> ::=
     630                           | ( <type param decl list> )

     631 <type param decl list> ::= <type param value>
     632                          | <type param decl list> ,
                                       <type param value>

     633 <type param value> ::= <expression>
     634                      | <id name> = <expression>
     635                      | :
     636                      | <id name> = :
     637                      | \*
     638                      | <id name> = \*

     639 <opt comma> ::=
     640               | ,

     641 <mp decl begin> ::=

     642 <mp decl> ::= <mp declaresimd> <declare simd>
     643             | <mp declaretarget> <declare target>
     644             | <declarered begin> <declare reduction>

     645 <declarered begin> ::= <mp declarereduction>

     646 <declare reduction> ::= ( <reduc op> : <type list> : <red comb> )
                                    <opt red init>

     647 <type list> ::= <type list> , <red type>
     648               | <red type>

     649 <red comb> ::= <id name> = <expression>
     650              | <id name> ( <ssa list> )

     651 <opt red init> ::=
     652                  | <id name> = <expression>
     653                  | <id name> ( <ssa list> )

     654 <expression> ::= <primary>
     655                | <addition>
     656                | <multiplication>
     657                | <exponentiation>
     658                | <disjunction>
     659                | <conjunction>
     660                | <eqv or neqv>
     661                | <log negation>
     662                | <concatenation>
     663                | <relation>
     664                | <defined binary>
     665                | <defined unary>

     666 <primary> ::= <var ref>
     667             | <constant>
     668             | %LOC ( <expression> )
     669             | <elp> <expression> )
     670             | <ac beg> <ac spec> <ac end>
     671             | <substring>

     672 <ac beg> ::= '(/'

     673 <ac end> ::= '/)'

     674 <elp> ::= (

     675 <ac spec> ::=
     676             | <ac list>
     677             | <type spec> :: <ac list>
     678             | <type spec> ::

     679 <ac list> ::= <ac list> , <ac item>
     680             | <ac item>

     681 <ac item> ::= <expression>
     682             | <elp> <ac list> , <implied do control> )
     683             | <expression> : <expression> <opt stride>
     684             | <elp> <ac list> , <expression> )

     685 <implied do control> ::= <var ref> <idc eq> <etmp exp> ,
                                     <etmp exp> <etmp e3>

     686 <idc eq> ::= =

     687 <etmp exp> ::= <etmp> <expression>

     688 <etmp e3> ::=
     689             | , <etmp exp>

     690 <etmp> ::=

     691 <etmp lp> ::= (

     692 <var ref list> ::= <var ref list> , <var ref>
     693                  | <var ref>

     694 <dvar ref> ::= <ident>
     695              | <dvar ref> ( <ssa list> )
     696              | <dvar ref> . <id>
     697              | <dvar ref> % <id>
     698              | <dvar ref> %LOC

     699 <var ref> ::= <ident>
     700             | <var primary ssa> ( )
     701             | <var primary ssa> ( <ssa list> )
     702             | <var primary> . <id>
     703             | <var primary> % <id>
     704             | <var primary> %LOC

     705 <var primary ssa> ::= <var primary>

     706 <var primary> ::= <var ref>

     707 <ssa list> ::= <ssa list> , <ssa>
     708              | <ssa>

     709 <ssa> ::= <expression>
     710         | <id name> = <expression>
     711         | <opt sub> : <opt sub> <opt stride>
     712         | <arg builtin>
     713         | \* <reflabel>
     714         | & <reflabel>

     715 <accel data ss> ::= <accel data name> ( <accel sub list> )

     716 <accel data name> ::= <ident>
     717                     | <accel data name> % <id>
     718                     | <accel data ss> % <id>

     719 <accel decl data ss> ::= <accel decl data name> (
                                     <accel decl sub list> )

     720 <accel mdecl data ss> ::= <accel mdecl data name> (
                                      <accel decl sub list> )

     721 <accel decl data name> ::= <ident>
     722                          | <accel decl data name> % <id>
     723                          | <accel decl data ss> % <id>

     724 <accel mdecl data name> ::= <ident>
     725                           | <accel mdecl data name> % <id>
     726                           | <accel mdecl data ss> % <id>

     727 <accel mdata ss> ::= <accel mdata name> ( <accel sub list> )

     728 <accel mdata name> ::= <ident>
     729                      | <accel mdata name> % <id>
     730                      | <accel mdata ss> % <id>

     731 <accel sdata name> ::= <ident>

     732 <arg builtin> ::= % <id name> ( <expression> )

     733 <opt sub> ::=
     734             | <expression>

     735 <opt stride> ::=
     736                | : <expression>

     737 <constant> ::= <integer>
     738              | <int kind const>
     739              | <half>
     740              | <real>
     741              | <double>
     742              | <quad>
     743              | <complex>
     744              | <dcomplex>
     745              | <qcomplex>
     746              | <nondec const>
     747              | <nonddec const>
     748              | <Hollerith>
     749              | <log const>
     750              | <log kind const>
     751              | <char literal>
     752              | <kanji string>
     753              | <elp> <expression> <cmplx comma> <expression> )

     754 <char literal> ::= <quoted string>
     755                  | <id> <underscore> <quoted string>
     756                  | <integer> <underscore> <quoted string>

     757 <substring> ::= <char literal> ( <opt sub> : <opt sub> )
     758               | <kanji string> ( <opt sub> : <opt sub> )

     759 <arith expr> ::= <addition>
     760                | <term>

     761 <addition> ::= <arith expr> <addop> <term>
     762              | <arith expr> <addop> <new term>
     763              | <new term>

     764 <addop> ::= +
     765           | -

     766 <addop list> ::= <addop list> <addop>
     767                | <addop>

     768 <term> ::= <multiplication>
     769          | <factor>

     770 <new term> ::= <addop list> <term>

     771 <multiplication> ::= <term> <mult op> <factor>
     772                    | <term> <mult op> <new factor>

     773 <mult op> ::= \*
     774             | /

     775 <factor> ::= <exponentiation>
     776            | <primary>
     777            | <defined unary>

     778 <defined unary> ::= <defined op> <primary>

     779 <new factor> ::= <addop list> <factor>

     780 <exponentiation> ::= <primary> \*\* <factor>
     781                    | <primary> \*\* <new factor>

     782 <log expr> ::= <log disjunct>
     783              | <eqv or neqv>

     784 <eqv or neqv> ::= <log expr> <n eqv op> <log disjunct>

     785 <log disjunct> ::= <disjunction>
     786                  | <log term>

     787 <disjunction> ::= <OR opr1> .OR. <log term>
     788                 | <OR opr1> .O. <log term>

     789 <OR opr1> ::= <log disjunct>

     790 <log term> ::= <conjunction>
     791              | <log factor>

     792 <conjunction> ::= <AND opr1> .AND. <log factor>

     793 <AND opr1> ::= <log term>

     794 <log factor> ::= <log negation>
     795                | <rel operand>
     796                | <relation>

     797 <log negation> ::= .NOT. <log factor>
     798                  | .N. <log factor>

     799 <relation> ::= <rel operand> <relop> <rel operand>

     800 <rel operand> ::= <primary>
     801                 | <exponentiation>
     802                 | <multiplication>
     803                 | <addition>
     804                 | <concatenation>

     805 <relop> ::= .EQ.
     806           | .GE.
     807           | .GT.
     808           | .LE.
     809           | .LT.
     810           | .NE.

     811 <char expr> ::= <arith expr>
     812               | <concatenation>

     813 <concatenation> ::= <char expr> '//' <arith expr>

     814 <defined binary> ::= <expression> <defined op> <log expr>

     815 <simple stmt> ::= <assignment>
     816                 | <assigned GOTO>
     817                 | <GOTO assignment>
     818                 | <computed GOTO>
     819                 | <arith IF>
     820                 | <call>
     821                 | <return>
     822                 | CONTINUE
     823                 | <stop stmt>
     824                 | <pause stmt>
     825                 | <allocation stmt>
     826                 | <IO stmt>
     827                 | <exit stmt>
     828                 | <cycle stmt>
     829                 | <pointer assignment>
     830                 | <nullify stmt>
     831                 | <where clause> <assignment>
     832                 | <forall clause> <forall assn stmt>
     833                 | <smp stmt>
     834                 | <pragma stmt>
     835                 | <accel stmt>
     836                 | <kernel stmt>
     837                 | <error stop stmt>

     838 <assignment> ::= <psfunc> <var ref> <psfunc> = <expression>

     839 <psfunc> ::=

     840 <assigned GOTO> ::= GOTOX <ident> <optional comma> ( <label list>
                                )
     841                   | GOTOX <ident>

     842 <label list> ::= <label list> , <reflabel>
     843                | <reflabel>

     844 <reflabel> ::= <label>

     845 <label> ::= <integer>

     846 <GOTO assignment> ::= ASSIGN <reflabel> TO <var ref>

     847 <computed GOTO> ::= GOTOX ( <label list> ) <optional comma>
                                <etmp exp>

     848 <arith IF> ::= <arith> <reflabel> , <reflabel> <opt aif label>

     849 <opt aif label> ::=
     850                   | , <reflabel>

     851 <arith> ::= <if construct> <etmp lp> <expression> )

     852 <call> ::= CALL <cvar ref>
     853          | CALL <ident> <chevron>
     854          | CALL <ident> <chevron> ( )
     855          | CALL <ident> <chevron> ( <arg list> )

     856 <cvar ref> ::= <ident>
     857              | <var primary ssa> ( )
     858              | <var primary ssa> ( <ssa list> )
     859              | <var primary> . <id>
     860              | <var primary> % <id>
     861              | <var primary> %LOC

     862 <chevron> ::= '<<<' <expression list> '>>>'

     863 <expression list> ::= <expression list> , <expression>
     864                     | \*
     865                     | <expression>

     866 <arg list> ::= <arg list> , <arg>
     867              | <arg>

     868 <arg> ::= <expression>
     869         | <id name> = <expression>
     870         | \* <reflabel>
     871         | & <reflabel>
     872         | <arg builtin>

     873 <return> ::= RETURN
     874            | RETURN <expression>

     875 <stop stmt> ::= STOP <stop pause>

     876 <quiet clause> ::= QUIET = <expression>

     877 <error stop stmt> ::= ERRORSTOP <error stop pause>
     878                     | ERRORSTOP <error stop pause> ,
                                  <quiet clause>

     879 <error stop pause> ::=
     880                      | <expression>

     881 <pause stmt> ::= PAUSE <stop pause>

     882 <stop pause> ::=
     883                | <expression>

     884 <GOTO stmt> ::= GOTO <reflabel>

     885 <IF clause> ::= <if construct> <etmp lp> <expression> )

     886 <if construct> ::= IF
     887                  | <check construct> : IF

     888 <check construct> ::= <named construct>

     889 <control stmt> ::= <IF clause> <simple stmt>
     890                  | <if construct> <etmp lp> <expression> ) GOTO
                               <reflabel>
     891                  | <if construct> <etmp lp> <expression> ) THEN
     892                  | <elseif> <expression> ) THEN <construct name>
     893                  | ELSE <construct name>
     894                  | ENDIF <construct name>
     895                  | <do begin> <loop control>
     896                  | <do begin>
     897                  | ENDDO <construct name>
     898                  | <where clause>
     899                  | <elsewhere clause>
     900                  | ENDWHERE <construct name>
     901                  | <forall clause>
     902                  | ENDFORALL <construct name>
     903                  | <case begin>
     904                  | <case> <elp> <case value list> )
                               <construct name>
     905                  | CASEDEFAULT <construct name>
     906                  | ENDSELECT <construct name>
     907                  | <associate stmt>
     908                  | ENDASSOCIATE <construct name>
     909                  | <select type stmt>
     910                  | <type guard stmt>

     911 <associate stmt> ::= ASSOCIATE ( <association list> )
     912                    | <check construct> : ASSOCIATE (
                                 <association list> )

     913 <association list> ::= <association>
     914                      | <association list> , <association>

     915 <association> ::= <id> '=>' <expression>

     916 <select type stmt> ::= SELECTTYPE ( <assoc or selector> )
     917                      | <check construct> : SELECTTYPE (
                                   <assoc or selector> )

     918 <assoc or selector> ::= <association>
     919                       | <expression>

     920 <type guard stmt> ::= <typeis stmt>
     921                     | <classis stmt>
     922                     | <classdefault stmt>

     923 <typeis stmt> ::= TYPEIS ( <typespec> ) <construct name>

     924 <typespec> ::= <intrinsic type>
     925              | <derived type spec>

     926 <derived type spec> ::= <type name>
     927                       | <pdt>

     928 <type name> ::= <ident>

     929 <pdt> ::= <type name> ( <pdt param list> )

     930 <pdt param list> ::= <pdt param list> , <pdt param>
     931                    | <pdt param>

     932 <pdt param> ::= <expression>
     933               | <id name> = <expression>
     934               | :
     935               | <id name> = :
     936               | \*
     937               | <id name> = \*

     938 <classis stmt> ::= CLASSIS ( <typespec> ) <construct name>

     939 <classdefault stmt> ::= CLASSDEFAULT <construct name>

     940 <elseif> ::= ELSEIF <etmp lp>

     941 <do begin> ::= <do construct> <label>
     942              | <do construct>

     943 <do construct> ::= DO
     944                  | <check construct> : DO

     945 <loop control> ::= <opt comma> <var ref> = <etmp exp> ,
                               <etmp exp> <etmp e3>
     946                  | <dowhile> <etmp lp> <expression> )
     947                  | <doconcurrent> <concurrent header>
                               <concurrent locality>

     948 <dowhile> ::= <opt comma> WHILE

     949 <doconcurrent> ::= <opt comma> CONCURRENT

     950 <concurrent header> ::= ( <concurrent type> <concurrent list>
                                    <opt mask expr> )

     951 <concurrent type> ::=
     952                     | <intrinsic type> ::

     953 <concurrent list> ::= <concurrent list> , <concurrent control>
     954                     | <concurrent control>

     955 <concurrent control> ::= <var ref> = <expression> : <expression>
                                     <opt stride>

     956 <opt mask expr> ::=
     957                   | , <mask expr>

     958 <concurrent locality> ::=
     959                         | <locality spec list>

     960 <locality spec list> ::= <locality spec list> <locality spec>
     961                        | <locality spec>

     962 <locality spec> ::= <locality kind> ( <locality name list> )
     963                   | DEFAULT ( NONE )

     964 <locality kind> ::= LOCAL
     965                   | LOCAL_INIT
     966                   | SHARED

     967 <locality name list> ::= <locality name list> , <ident>
     968                        | <ident>

     969 <elsewhere clause> ::= ELSEWHERE <construct name>
     970                      | ELSEWHERE ( <mask expr> ) <construct name>

     971 <where clause> ::= <where construct> ( <mask expr> )

     972 <where construct> ::= WHERE
     973                     | <check construct> : WHERE

     974 <mask expr> ::= <expression>

     975 <allocation stmt> ::= ALLOCATE ( <alloc list> <alloc cntl> )
     976                     | ALLOCATE ( <alloc type> :: <alloc list>
                                  <alloc cntl> )
     977                     | DEALLOCATE ( <alloc list> <alloc cntl> )

     978 <alloc type> ::= <type spec>

     979 <alloc list> ::= <alloc list> , <alloc object>
     980                | <alloc object>

     981 <alloc object> ::= <alloc obj>

     982 <alloc obj> ::= <ident>
     983               | <alloc obj> ( <ssa list> )
     984               | <alloc obj> % <id>
     985               | <alloc obj> %LOC
     986               | <alloc obj> ( <ssa list> ) :: <ident>

     987 <alloc cntl> ::=
     988                | <alloc cntl list>

     989 <alloc cntl list> ::= <alloc cntl list> <alloc cntl item>
     990                     | <alloc cntl item>

     991 <alloc cntl item> ::= , PINNED = <var ref>
     992                     | , STAT = <var ref>
     993                     | , ERRMSG = <var ref>
     994                     | , SOURCE = <expression>
     995                     | , MOLD = <expression>
     996                     | , ALIGN = <expression>

     997 <forall clause> ::= <forall begin> <concurrent header>

     998 <forall begin> ::= <forall construct>

     999 <forall construct> ::= FORALL
    1000                      | <check construct> : FORALL

    1001 <null stmt> ::=

    1002 <exit stmt> ::= EXIT <construct name>

    1003 <construct name> ::=
    1004                    | <id>

    1005 <cycle stmt> ::= CYCLE <construct name>

    1006 <case begin> ::= SELECTCASE <etmp lp> <expression> )
    1007                | <check construct> : SELECTCASE <etmp lp>
                             <expression> )

    1008 <case> ::= CASE

    1009 <case value list> ::= <case value list> , <case value>
    1010                     | <case value>

    1011 <case value> ::= <case expr>
    1012                | <case expr> :
    1013                | : <case expr>
    1014                | <case expr> : <case expr>

    1015 <case expr> ::= <expression>

    1016 <pointer assignment> ::= <psfunc> <var ref> <psfunc> '=>'
                                     <expression>

    1017 <nullify stmt> ::= NULLIFY ( <nullify list> )

    1018 <nullify list> ::= <nullify list> , <nullify object>
    1019                  | <nullify object>

    1020 <nullify object> ::= <var ref>

    1021 <forall assn stmt> ::= <assignment>
    1022                      | <pointer assignment>

    1023 <pragma stmt> ::= PREFETCH <var ref list>
    1024                 | DISTRIBUTEPOINT
    1025                 | DISTRIBUTE

    1026 <null> ::=

    1027 <write> ::=

    1028 <read> ::=

    1029 <IO stmt> ::= <null> BACKSPACE <unit info>
    1030             | <null> ENDFILE <unit info>
    1031             | <null> REWIND <unit info>
    1032             | <null> CLOSE <iolp> <spec list> )
    1033             | <null> OPEN <iolp> <spec list> )
    1034             | <null> INQUIRE <iolp> <spec list> )
    1035             | <write> WRITE <io spec>
    1036             | <write> WRITE <io spec> <output list>
    1037             | <write> PRINT <print spec>
    1038             | <write> PRINT <print spec> , <output list>
    1039             | <read> READ <io spec> <input list>
    1040             | <read> READ <read spec2>
    1041             | <read> READ <read spec3> , <input list>
    1042             | <read> ACCEPT <read spec4>
    1043             | <read> ACCEPT <read spec3> , <input list>
    1044             | <write> ENCODE <encode spec> <optional comma>
                          <output list>
    1045             | <write> ENCODE <encode spec>
    1046             | <read> DECODE <encode spec> <optional comma>
                          <input list>
    1047             | <read> DECODE <encode spec>
    1048             | <null> INQUIRE <iolp> IOLENGTH = <var ref> )
                          <output list>
    1049             | <null> WAIT <iolp> <spec list> )
    1050             | <null> FLUSH <unit info>

    1051 <unit info> ::= <unit id>
    1052               | <iolp> <unit data list> )
    1053               | <iolp> <unit id> )

    1054 <unit data list> ::= <unit data list> , <unit data>
    1055                    | <unit id> , <unit data>
    1056                    | <unit data>

    1057 <unit data> ::= UNIT = <unit id>
    1058               | ERR = <reflabel>
    1059               | IOSTAT = <var ref>
    1060               | IOMSG = <var ref>
    1061               | NEWUNIT = <var ref>

    1062 <unit id> ::= <expression>
    1063             | \*

    1064 <spec list> ::= <spec list> , <spec item>
    1065               | <spec item>

    1066 <spec item> ::= <unit data>
    1067               | STATUS = <expression>
    1068               | FILE = <expression>
    1069               | NAME = <expression>
    1070               | ACCESS = <expression>
    1071               | FORM = <expression>
    1072               | RECL = <expression>
    1073               | BLANK = <expression>
    1074               | DISPOSE = <expression>
    1075               | READONLY
    1076               | READ = <var ref>
    1077               | WRITE = <var ref>
    1078               | READWRITE = <var ref>
    1079               | ACTION = <expression>
    1080               | DELIM = <expression>
    1081               | PAD = <expression>
    1082               | POSITION = <expression>
    1083               | EXIST = <var ref>
    1084               | OPENED = <var ref>
    1085               | NUMBER = <var ref>
    1086               | NAMED = <var ref>
    1087               | SEQUENTIAL = <var ref>
    1088               | DIRECT = <var ref>
    1089               | FORMATTED = <var ref>
    1090               | UNFORMATTED = <var ref>
    1091               | NEXTREC = <var ref>
    1092               | FMT = <format id>
    1093               | REC = <expression>
    1094               | End = <reflabel>
    1095               | NML = <ident>
    1096               | <expression>
    1097               | \*
    1098               | ADVANCE = <expression>
    1099               | EOR = <reflabel>
    1100               | CONVERT = <expression>
    1101               | SHARED
    1102               | ID = <var ref>
    1103               | PENDING = <var ref>
    1104               | POS = <expression>
    1105               | SIZE = <var ref>
    1106               | ASYNCHRONOUS = <expression>
    1107               | DECIMAL = <expression>
    1108               | ENCODING = <expression>
    1109               | SIGN = <expression>
    1110               | STREAM = <var ref>
    1111               | ROUND = <expression>

    1112 <format id> ::= <expression>
    1113               | \*

    1114 <fid or nid> ::= <expression>
    1115                | \*

    1116 <print spec> ::= <fid or nid>

    1117 <io spec> ::= <iolp> <spec list> ) <optional comma>

    1118 <read spec2> ::= <iolp> <spec list> )
    1119                | <fid or nid>

    1120 <read spec3> ::= <format id>

    1121 <read spec4> ::= <fid or nid>

    1122 <encode spec> ::= <iolp> <encode unit> <encode ctl> )

    1123 <encode unit> ::= <expression> , <format id> , <var ref>

    1124 <encode ctl> ::=
    1125                | , <spec list>

    1126 <output list> ::= <output list> , <output item>
    1127                 | <elp> <output list> , <output item> )
    1128                 | <output item>

    1129 <output item> ::= <expression>
    1130                 | <elp> <output list> , <implied do control> )

    1131 <input list> ::= <input list> , <input item>
    1132                | <input item>

    1133 <input item> ::= <var ref>
    1134                | <elp> <input list> )
    1135                | <elp> <input list> , <implied do control> )

    1136 <format stmt> ::= <format> ( <format list> )
    1137                 | <format> ( )
    1138                 | FORMAT <fmtstr>
    1139                 | <format> ( <format list unl> )

    1140 <format> ::= FORMAT

    1141 <format list> ::= <format list> <format item>
    1142                 | <format item>
    1143                 | <format list unl> <unlimited format item>
    1144                 | <format list unl> <format item>

    1145 <format list unl> ::= <format list> <unlimited format item>
    1146                     | <unlimited format item>

    1147 <format item> ::= ,
    1148                 | <repeat factor> /
    1149                 | :
    1150                 | <char literal>
    1151                 | <kanji string>
    1152                 | <Hollerith>
    1153                 | <repeat factor> <F1 item>
    1154                 | <repeat factor> <F2 item>
    1155                 | <scale factor>
    1156                 | <F3 item>

    1157 <repeat factor> ::=
    1158                   | <ffield>

    1159 <scale factor> ::= <ffield> P
    1160                  | <addop> <ffield> P

    1161 <F1 item> ::= <flp> <format list> )
    1162             | I <ffield>
    1163             | I <ffield> . <ffield>
    1164             | A <ffield>
    1165             | N <ffield>
    1166             | L <ffield>
    1167             | O <ffield>
    1168             | O <ffield> . <ffield>
    1169             | Z <ffield>
    1170             | Z <ffield> . <ffield>
    1171             | <aformat>
    1172             | <nformat>
    1173             | <lformat>
    1174             | <iformat>
    1175             | <oformat>
    1176             | <zformat>
    1177             | B <ffield>
    1178             | B <ffield> . <ffield>
    1179             | <flp> <format list unl> )

    1180 <flp> ::= (

    1181 <F2 item> ::= F <ffield> . <ffield>
    1182             | E <ffield> . <ffield>
    1183             | G <ffield> . <ffield>
    1184             | E <ffield>
    1185             | D <ffield> . <ffield>
    1186             | <fformat>
    1187             | <eformat>
    1188             | <gformat>
    1189             | <dformat>
    1190             | EN <ffield> . <ffield>
    1191             | ES <ffield> . <ffield>
    1192             | <dtformat>
    1193             | DT <dts>
    1194             | <g0format>

    1195 <dts> ::= <char literal>
    1196         | <char literal> <dlp> <dt vlist> )
    1197         | <dlp> <dt vlist> )

    1198 <dt vlist> ::= <dt vlist> , <addop> <integer>
    1199              | <dt vlist> , <integer>
    1200              | <addop> <integer>
    1201              | <integer>

    1202 <F3 item> ::= T <ffield>
    1203             | TL <ffield>
    1204             | TR <ffield>
    1205             | <ffield> X
    1206             | X
    1207             | S
    1208             | SP
    1209             | SS
    1210             | BN
    1211             | BZ
    1212             | DC
    1213             | DP
    1214             | Q
    1215             | '$'
    1216             | RU
    1217             | RD
    1218             | RZ
    1219             | RN
    1220             | RC
    1221             | RP

    1222 <ffield> ::= <integer>

    1223 <unlimited format item> ::= <star repeat> <flp> <format list> )

    1224 <star repeat> ::= \*

    1225 <declare simd> ::= <declare simd name> <opt par list>

    1226 <declare simd name> ::=
    1227                       | ( <id> )

    1228 <declare target> ::=
    1229                    | ( <ident list> )
    1230                    | <par list>

    1231 <smp stmt> ::= <mp begin> <mp stmt>

    1232 <mp begin> ::=

    1233 <mp stmt> ::= <par begin> <opt par list>
    1234             | <mp endparallel>
    1235             | <mp critical> <opt csident>
    1236             | <mp endcritical> <opt csident>
    1237             | <single begin> <opt par list>
    1238             | <mp endsingle> <opt endsingle list>
    1239             | <pdo begin> <opt par list>
    1240             | <mp endpdo> <opt nowait>
    1241             | <mp barrier>
    1242             | <mp master>
    1243             | <mp endmaster>
    1244             | <mp atomic begin> <opt atomic type>
    1245             | <doacross begin> <opt par list>
    1246             | <paralleldo begin> <opt par list>
    1247             | <mp endpardo>
    1248             | <parallelsections begin> <opt par list>
    1249             | <mp endparsections>
    1250             | <sections begin> <opt par list>
    1251             | <mp section>
    1252             | <mp endsections> <opt nowait>
    1253             | <mp flush>
    1254             | <mp flush> ( <ident list> )
    1255             | <mp ordered> <opt ordered list>
    1256             | <mp endordered>
    1257             | <mp workshare>
    1258             | <mp endworkshare> <opt nowait>
    1259             | <parworkshare begin> <opt par list>
    1260             | <mp endparworkshare>
    1261             | <task begin> <opt par list>
    1262             | <mp endtask>
    1263             | <mp taskwait>
    1264             | <mp taskyield>
    1265             | <mp endatomic>
    1266             | <taskloop begin> <opt par list>
    1267             | <mp endtaskloop>
    1268             | <taskloopsimd begin> <opt par list>
    1269             | <mp endtaskloopsimd>
    1270             | <mp cancel> <id name> <opt par ifclause>
    1271             | <dosimd begin> <opt par list>
    1272             | <mp enddosimd> <opt nowait>
    1273             | <simd begin> <opt par list>
    1274             | <mp endsimd>
    1275             | <targetdata begin> <opt par list>
    1276             | <mp endtargetdata>
    1277             | <targetenterdata begin> <opt par list>
    1278             | <targetexitdata begin> <opt par list>
    1279             | <targetupdate begin> <opt par list>
    1280             | <target begin> <opt par list>
    1281             | <mp endtarget>
    1282             | <teams begin> <opt par list>
    1283             | <mp endteams>
    1284             | <distribute begin> <opt par list>
    1285             | <mp enddistribute>
    1286             | <distsimd begin> <opt par list>
    1287             | <mp enddistsimd>
    1288             | <distpardo begin> <opt par list>
    1289             | <mp enddistpardo>
    1290             | <distpardosimd begin> <opt par list>
    1291             | <mp enddistpardosimd>
    1292             | <pardosimd begin> <opt par list>
    1293             | <mp endpardosimd>
    1294             | <targpar begin> <opt par list>
    1295             | <mp endtargpar>
    1296             | <targpardo begin> <opt par list>
    1297             | <mp endtargpardo>
    1298             | <targparsimd begin> <opt par list>
    1299             | <mp endtargparsimd>
    1300             | <targpardosimd begin> <opt par list>
    1301             | <mp endtargpardosimd>
    1302             | <targsimd begin> <opt par list>
    1303             | <mp endtargsimd>
    1304             | <targteams begin> <opt par list>
    1305             | <mp endtargteams>
    1306             | <teamsdist begin> <opt par list>
    1307             | <mp endteamsdist>
    1308             | <teamsdistsimd begin> <opt par list>
    1309             | <mp endteamsdistsimd>
    1310             | <targteamsdist begin> <opt par list>
    1311             | <mp endtargteamsdist>
    1312             | <targteamsdistsimd begin> <opt par list>
    1313             | <mp endtargteamsdistsimd>
    1314             | <teamsdistpardo begin> <opt par list>
    1315             | <mp endteamsdistpardo>
    1316             | <targteamsdistpardo begin> <opt par list>
    1317             | <mp endtargteamsdistpardo>
    1318             | <teamsdistpardosimd begin> <opt par list>
    1319             | <mp endteamsdistpardosimd>
    1320             | <targteamsdistpardosimd begin> <opt par list>
    1321             | <mp endtargteamsdistpardosimd>
    1322             | <mp taskgroup>
    1323             | <mp endtaskgroup>
    1324             | <mp cancellationpoint> <id name>

    1325 <opt csident> ::=
    1326                 | ( <id name> )

    1327 <opt nowait> ::=
    1328                | <opt comma> <nowait>

    1329 <opt atomic type> ::=
    1330                     | <pre seq_cst> UPDATE <post seq_cst>
    1331                     | <pre seq_cst> READ <post seq_cst>
    1332                     | <pre seq_cst> WRITE <post seq_cst>
    1333                     | <pre seq_cst> CAPTURE <post seq_cst>
    1334                     | <seq cst>

    1335 <pre seq_cst> ::=
    1336                 | <seq cst> <opt comma>

    1337 <post seq_cst> ::=
    1338                  | <opt comma> <seq cst>

    1339 <seq cst> ::= SEQ_CST

    1340 <nowait> ::= NOWAIT

    1341 <opt endsingle list> ::=
    1342                        | <opt comma> <endsingle list>

    1343 <endsingle list> ::= <endsingle list> <opt comma>
                                 <endsingle item>
    1344                    | <endsingle item>

    1345 <endsingle item> ::= <nowait>
    1346                    | COPYPRIVATE ( <tp list> )

    1347 <par begin> ::= <mp parallel>

    1348 <opt par list> ::=
    1349                  | <opt comma> <par list>

    1350 <par list> ::= <par list> <opt comma> <par attr>
    1351              | <par attr>

    1352 <par attr> ::= DEFAULT ( <id name> )
    1353              | <private list>
    1354              | SHARED ( <pflsr list> )
    1355              | <firstprivate>
    1356              | <lastprivate>
    1357              | <schedule>
    1358              | ORDERED <opt expression>
    1359              | REDUCTION ( <reduction> )
    1360              | <par ifclause>
    1361              | COPYIN ( <cmn ident list> )
    1362              | NUM_THREADS ( <expression> )
    1363              | COLLAPSE ( <expression> )
    1364              | UNTIED
    1365              | FINAL ( <expression> )
    1366              | MERGEABLE
    1367              | PROC_BIND ( <id name> )
    1368              | SAFELEN ( <expression> )
    1369              | <linear clause>
    1370              | <aligned clause>
    1371              | SIMDLEN ( <expression> )
    1372              | <uniform clause>
    1373              | INBRANCH
    1374              | NOTINBRANCH
    1375              | LINK ( <ident list> )
    1376              | DEVICE ( <expression> )
    1377              | <map clause>
    1378              | <depend clause>
    1379              | IS_DEVICE_PTR ( <ident list> )
    1380              | DEFAULTMAP ( <id name> : <id name> )
    1381              | <motion clause>
    1382              | DIST_SCHEDULE ( <id name> <opt distchunk> )
    1383              | GRAINSIZE ( <expression> )
    1384              | NUM_TASKS ( <expression> )
    1385              | PRIORITY ( <expression> )
    1386              | NUM_TEAMS ( <expression> )
    1387              | THREAD_LIMIT ( <expression> )
    1388              | NOGROUP

    1389 <opt expression> ::=
    1390                    | ( <expression> )

    1391 <opt ordered list> ::=
    1392                      | <ordered list>

    1393 <ordered list> ::= <ordered list> <opt comma> <ordered attr>
    1394                  | <ordered attr>

    1395 <ordered attr> ::= SIMD
    1396                  | THREADS
    1397                  | <depend clause>

    1398 <pflsr list> ::= <pflsr list> , <cmn ident>
    1399                | <cmn ident>

    1400 <private list> ::= PRIVATE ( <pflsr list> )

    1401 <firstprivate> ::= FIRSTPRIVATE ( <pflsr list> )

    1402 <lastprivate> ::= LASTPRIVATE ( <pflsr list> )

    1403 <schedule> ::= SCHEDULE <sched type>
    1404              | MP_SCHEDTYPE = <id name>
    1405              | CHUNK = <expression>

    1406 <sched type> ::=
    1407                | ( <id name> <opt chunk> )

    1408 <opt chunk> ::=
    1409               | , <expression>

    1410 <opt distchunk> ::=
    1411                   | , <expression>

    1412 <reduction> ::= <reduc op> : <pflsr list>
    1413               | <pflsr list>

    1414 <reduc op> ::= <addop>
    1415              | \*
    1416              | .AND.
    1417              | .OR.
    1418              | .EQV.
    1419              | .NEQV.
    1420              | <ident>

    1421 <par ifclause> ::= IF ( <expression> )
    1422                  | IF ( <id name> : <expression> )
    1423                  | IF ( <id name> <id name> : <expression> )
    1424                  | IF ( <id name> <id name> <id name> :
                               <expression> )

    1425 <opt par ifclause> ::=
    1426                      | <opt comma> <par ifclause>

    1427 <linear clause> ::= LINEAR ( <linear expr> )

    1428 <linear expr> ::= <linear modifier> <linear opt step>

    1429 <linear modifier> ::= <pflsr list>
    1430                     | <id name> ( <pflsr list> )

    1431 <linear opt step> ::=
    1432                     | : <expression>

    1433 <aligned clause> ::= ALIGNED ( <aligned> )

    1434 <aligned> ::= <pflsr list>
    1435             | <pflsr list> : <expression>

    1436 <uniform clause> ::= UNIFORM ( <pflsr list> )

    1437 <map clause> ::= MP_MAP ( <map item> )

    1438 <map item> ::= <accel data list>
    1439              | <map type> : <accel data list>

    1440 <map type> ::= <id name>
    1441              | ALWAYS <opt comma> <id name>

    1442 <depend clause> ::= DEPEND ( <depend attr> )

    1443 <depend attr> ::= <id name>
    1444                 | <id name> : <depend data list>

    1445 <motion clause> ::= TO ( <var ref list> )
    1446                   | FROM ( <var ref list> )

    1447 <depend data list> ::= <var ref list>
    1448                      | <depend data>

    1449 <depend data> ::= <ident> <addop> <constant>

    1450 <single begin> ::= <mp single>

    1451 <pdo begin> ::= <mp pdo>

    1452 <mp atomic begin> ::= <mp atomic>

    1453 <doacross begin> ::= <mp doacross>

    1454 <paralleldo begin> ::= <mp pardo>

    1455 <parallelsections begin> ::= <mp parsections>

    1456 <sections begin> ::= <mp sections>

    1457 <parworkshare begin> ::= <mp parworkshare>

    1458 <task begin> ::= <mp task>

    1459 <dosimd begin> ::= <mp dosimd>

    1460 <simd begin> ::= <mp simd>

    1461 <targetdata begin> ::= <mp targetdata>

    1462 <targetenterdata begin> ::= <mp targetenterdata>

    1463 <targetexitdata begin> ::= <mp targetexitdata>

    1464 <target begin> ::= <mp target>

    1465 <targetupdate begin> ::= <mp targetupdate>

    1466 <teams begin> ::= <mp teams>

    1467 <distribute begin> ::= <mp distribute>

    1468 <distsimd begin> ::= <mp distsimd>

    1469 <distpardo begin> ::= <mp distpardo>

    1470 <distpardosimd begin> ::= <mp distpardosimd>

    1471 <pardosimd begin> ::= <mp pardosimd>

    1472 <targpar begin> ::= <mp targpar>

    1473 <targpardo begin> ::= <mp targpardo>

    1474 <targparsimd begin> ::= <mp targparsimd>

    1475 <targpardosimd begin> ::= <mp targpardosimd>

    1476 <targsimd begin> ::= <mp targsimd>

    1477 <targteams begin> ::= <mp targteams>

    1478 <teamsdist begin> ::= <mp teamsdist>

    1479 <teamsdistsimd begin> ::= <mp teamsdistsimd>

    1480 <targteamsdist begin> ::= <mp targteamsdist>

    1481 <targteamsdistsimd begin> ::= <mp targteamsdistsimd>

    1482 <teamsdistpardo begin> ::= <mp teamsdistpardo>

    1483 <targteamsdistpardo begin> ::= <mp targteamsdistpardo>

    1484 <teamsdistpardosimd begin> ::= <mp teamsdistpardosimd>

    1485 <targteamsdistpardosimd begin> ::= <mp targteamsdistpardosimd>

    1486 <taskloop begin> ::= <mp taskloop>

    1487 <taskloopsimd begin> ::= <mp taskloopsimd>

    1488 <accel stmt> ::= <accel begin> ACCREGION <opt accel list>
    1489                | <accel begin> ACCKERNELS <opt accel list>
    1490                | <accel begin> PARALLEL <opt accel list>
    1491                | <accel begin> ACCDATA <opt accel list>
    1492                | <accel begin> ACCDATAREGION <opt accel list>
    1493                | <accel begin> ACCDO <opt accel list>
    1494                | <accel begin> ACCLOOP <opt accel list>
    1495                | <accel begin> ACCREGIONDO <opt accel list>
    1496                | <accel begin> ACCREGIONLOOP <opt accel list>
    1497                | <accel begin> ACCKERNELSDO <opt accel list>
    1498                | <accel begin> ACCKERNELSLOOP <opt accel list>
    1499                | <accel begin> ACCPARALLELDO <opt accel list>
    1500                | <accel begin> ACCPARALLELLOOP <opt accel list>
    1501                | <accel begin> <accel update dir>
    1502                | <accel begin> ACCENDREGION <opt end accel list>
    1503                | <accel begin> ACCENDKERNELS
    1504                | <accel begin> ACCENDKERNDO
    1505                | <accel begin> ACCENDKERNLOOP
    1506                | <accel begin> ACCENDPARALLEL
    1507                | <accel begin> ACCENDPARDO
    1508                | <accel begin> ACCENDPARLOOP
    1509                | ACCENDDATAREGION
    1510                | ACCENDDATA
    1511                | <accel begin> ACCSCALARREGION <opt accel list>
    1512                | <accel begin> ACCENDSCALARREGION
    1513                | <accel begin> ACCSCALAR ACCREGION
                             <opt accel list>
    1514                | ACCENDSCALAR
    1515                | <accel begin> ACCWAIT <opt wait list>
    1516                | <accel begin> CACHE ( <accel data list> )
    1517                | <accel begin> ACCHOSTDATA <opt accel list>
    1518                | ACCENDHOSTDATA
    1519                | <accel begin> ACCENTER ACCDATA <opt accel list>
    1520                | <accel begin> ACCEXIT ACCDATA <opt accel list>
    1521                | <accel begin> ACCENDLOOP
    1522                | <accel begin> ACCENDDO
    1523                | <accel begin> ACCATOMIC
    1524                | <accel begin> ACCATOMICUPDATE
    1525                | <accel begin> ACCATOMICREAD
    1526                | <accel begin> ACCATOMICWRITE
    1527                | <accel begin> ACCATOMICCAPTURE
    1528                | <accel begin> ACCENDATOMIC
    1529                | <accel begin> ACCINIT <opt accel init list>
    1530                | <accel begin> ACCSHUTDOWN
                             <opt accel shutdown list>
    1531                | <accel begin> <accel setdev dir>
    1532                | <accel begin> CACHE ( <ident> :
                             <accel sdata list> )
    1533                | <accel begin> ACCSERIAL <opt accel list>
    1534                | <accel begin> ACCENDSERIAL
    1535                | <accel begin> ACCSERIALLOOP <opt accel list>
    1536                | <accel begin> ACCENDSERIALLOOP
    1537                | <accel begin> <accel compare dir>
    1538                | <pgi begin> <pgi compare dir>

    1539 <accel begin> ::=

    1540 <pgi begin> ::=

    1541 <opt accel list> ::=
    1542                    | <opt comma> <accel list>

    1543 <accel list> ::= <accel list> <opt comma> <accel attr>
    1544                | <accel attr>

    1545 <accel attr> ::= COPYIN ( <accel data list> )
    1546                | COPYOUT ( <accel data list> )
    1547                | LOCAL ( <accel data list> )
    1548                | CREATE ( <accel data list> )
    1549                | PRESENT ( <accel data list> )
    1550                | PCOPY ( <accel data list> )
    1551                | PCOPYIN ( <accel data list> )
    1552                | PCOPYOUT ( <accel data list> )
    1553                | PLOCAL ( <accel data list> )
    1554                | PCREATE ( <accel data list> )
    1555                | DEVICEPTR ( <accel mdata list> )
    1556                | PRIVATE ( <accel mdata list> )
    1557                | FIRSTPRIVATE ( <accel mdata list> )
    1558                | CACHE ( <accel mdata list> )
    1559                | SHORTLOOP
    1560                | VECTOR ( <ident> : <expression> )
    1561                | VECTOR ( <expression> )
    1562                | VECTOR
    1563                | PARALLEL ( <expression> )
    1564                | PARALLEL
    1565                | SEQ ( <expression> )
    1566                | SEQ
    1567                | HOST ( <expression> )
    1568                | HOST
    1569                | IF ( <expression> )
    1570                | UNROLL ( <expression> )
    1571                | INDEPENDENT
    1572                | KERNEL
    1573                | COPY ( <accel data list> )
    1574                | MIRROR ( <accel mdata list> )
    1575                | ACCUPDATE HOST ( <accel data list> )
    1576                | ACCUPDATE SELF ( <accel data list> )
    1577                | ACCUPDATE DEVICE ( <accel data list> )
    1578                | <accel short update>
    1579                | ACCUPDATE ACCIN ( <accel data list> )
    1580                | ACCUPDATE ACCOUT ( <accel data list> )
    1581                | ACCWAIT
    1582                | NOWAIT
    1583                | WORKER ( <ident> : <expression> )
    1584                | WORKER ( <expression> )
    1585                | WORKER
    1586                | GANG ( <acc gang args> )
    1587                | GANG
    1588                | COLLAPSE ( <expression> )
    1589                | ASYNC
    1590                | ASYNC ( <expression> )
    1591                | REDUCTION ( <reduction> )
    1592                | NUM_WORKERS ( <expression> )
    1593                | NUM_GANGS ( <gangsizes> )
    1594                | VECTOR_LENGTH ( <expression> )
    1595                | USE_DEVICE ( <accel mdata list> )
    1596                | DEVICEID ( <expression> )
    1597                | DELETE ( <accel data list> )
    1598                | PDELETE ( <accel data list> )
    1599                | ACCWAIT ( <accel wait list> )
    1600                | DEVICE_TYPE ( <devtype list> )
    1601                | AUTO
    1602                | ACCTILE ( <accsizelist> )
    1603                | DEFAULT ( <ident> )
    1604                | PNOT ( <accel data list> )
    1605                | COLLAPSE ( <ident> : <expression> )
    1606                | ACCFINALIZE
    1607                | ACCIFPRESENT
    1608                | ACCATTACH ( <accel data list> )
    1609                | ACCDETACH ( <accel data list> )
    1610                | NO_CREATE ( <accel data list> )
    1611                | COMPARE ( <accel data list> )

    1612 <acc gang args> ::= <acc gang arg>
    1613                   | <acc gang args> , <acc gang arg>

    1614 <acc gang arg> ::= <expression>
    1615                  | <ident> : <accsize>

    1616 <gangsizes> ::= <expression>
    1617               | <expression> , <gangsize2>

    1618 <gangsize2> ::= <expression>
    1619               | <expression> , <gangsize3>

    1620 <gangsize3> ::= <expression>

    1621 <accsizelist> ::= <accsize>
    1622                 | <accsizelist> , <accsize>

    1623 <accsize> ::= <expression>
    1624             | \*

    1625 <opt end accel list> ::=
    1626                        | <end accel list>

    1627 <end accel list> ::= <end accel list> <opt comma>
                                 <end accel attr>
    1628                    | <end accel attr>

    1629 <end accel attr> ::= ACCWAIT
    1630                    | NOWAIT

    1631 <accel data list> ::= <accel data list> , <accel data>
    1632                     | <accel data>

    1633 <accel data> ::= <accel data name> ( <accel sub list> )
    1634                | <accel data name>
    1635                | <constant>
    1636                | <common>
    1637                | <accel data name> '<' <ident> '>' (
                             <accel sub list> )
    1638                | <accel data name> '<' <ident> '>'

    1639 <accel mdata list> ::= <accel mdata list> , <accel mdata>
    1640                      | <accel mdata>

    1641 <accel mdata> ::= <accel mdata name> ( <accel sub list> )
    1642                 | <accel mdata name>
    1643                 | <constant>

    1644 <accel sdata list> ::= <accel sdata list> , <accel sdata>
    1645                      | <accel sdata>

    1646 <accel sdata> ::= <accel sdata name>
    1647                 | <constant>

    1648 <accel sub list> ::= <accel sub list> , <accel sub>
    1649                    | <accel sub>

    1650 <accel sub> ::= <opt sub> : <opt sub>
    1651               | <expression>

    1652 <accel update dir> ::= ACCUPDATE <accel update list>
    1653                      | ACCUPDATEHOST ( <accel data list> )
                                   <opt update list>
    1654                      | ACCUPDATESELF ( <accel data list> )
                                   <opt update list>
    1655                      | ACCUPDATEDEV ( <accel data list> )
                                   <opt update list>
    1656                      | ACCUPDATEIN ( <accel data list> )
                                   <opt update list>
    1657                      | ACCUPDATEOUT ( <accel data list> )
                                   <opt update list>

    1658 <opt update list> ::=
    1659                     | <accel update list>

    1660 <accel update list> ::= <accel update attr>
    1661                       | <accel update list> <opt comma>
                                    <accel update attr>

    1662 <accel update attr> ::= HOST ( <accel data list> )
    1663                       | SELF ( <accel data list> )
    1664                       | DEVICE ( <accel data list> )
    1665                       | ACCIN ( <accel data list> )
    1666                       | ACCOUT ( <accel data list> )
    1667                       | IF ( <expression> )
    1668                       | ASYNC
    1669                       | ASYNC ( <expression> )
    1670                       | DEVICEID ( <expression> )
    1671                       | ACCWAIT
    1672                       | ACCWAIT ( <accel wait list> )
    1673                       | ACCIFPRESENT

    1674 <accel short update> ::= ACCUPDATEHOST ( <accel data list> )
    1675                        | ACCUPDATESELF ( <accel data list> )
    1676                        | ACCUPDATEDEV ( <accel data list> )
    1677                        | ACCUPDATEIN ( <accel data list> )
    1678                        | ACCUPDATEOUT ( <accel data list> )

    1679 <opt wait list> ::=
    1680                   | ( <accel wait list> )
    1681                   | <opt wait list> <wait item>

    1682 <wait item> ::= IF ( <expression> )
    1683               | DEVICEID ( <expression> )
    1684               | ASYNC
    1685               | ASYNC ( <expression> )

    1686 <accel wait list> ::= <expression>
    1687                     | <accel wait list> , <expression>

    1688 <kernel stmt> ::= <kernel begin> KERNEL DO <kernel do list>

    1689 <kernel begin> ::=

    1690 <kernel do list> ::= <kernel do nest> <kernel do shape>

    1691 <kernel do nest> ::=
    1692                    | ( )
    1693                    | ( <expression> )

    1694 <kernel do shape> ::=
    1695                     | '<<<' '>>>'
    1696                     | '<<<' <kernel do grid shape> ,
                                  <kernel do block shape> <kernel do args>
                                  '>>>'

    1697 <kernel do grid shape> ::=
    1698                          | \*
    1699                          | <expression>
    1700                          | <elp> )
    1701                          | <elp> \* )
    1702                          | <elp> <kernel shape list> )

    1703 <kernel do block shape> ::=
    1704                           | \*
    1705                           | <expression>
    1706                           | <elp> )
    1707                           | <elp> \* )
    1708                           | <elp> <kernel shape list> )

    1709 <kernel shape list> ::= <kernel shape expr> , <kernel shape expr>
    1710                       | <kernel shape list> , <kernel shape expr>

    1711 <kernel shape expr> ::=
    1712                       | \*
    1713                       | <expression>

    1714 <kernel do args> ::=
    1715                    | <kernel do args> , <kernel do arg>

    1716 <kernel do arg> ::=
    1717                   | <expression>
    1718                   | <id name> = <expression>

    1719 <opt accel init list> ::=
    1720                         | <opt accel init list> <opt comma>
                                      <acc init attr>

    1721 <acc init attr> ::= DEVICE_NUM ( <expression> )
    1722                   | DEVICE_TYPE ( <devtype list> )

    1723 <accel setdev dir> ::= ACCSET <accel setdev list>

    1724 <accel setdev list> ::= <accel setdev attr>
    1725                       | <accel setdev list> <opt comma>
                                    <accel setdev attr>

    1726 <accel setdev attr> ::= DEVICE_TYPE ( <ident> )
    1727                       | DEVICE_NUM ( <expression> )
    1728                       | DEFAULT_ASYNC ( <expression> )

    1729 <opt accel shutdown list> ::=
    1730                             | <opt accel shutdown list>
                                          <opt comma> <acc shutdown attr>

    1731 <acc shutdown attr> ::= DEVICE_NUM ( <expression> )
    1732                       | DEVICE_TYPE ( <devtype list> )

    1733 <accel compare dir> ::= COMPARE ( <accel data list> )

    1734 <pgi compare dir> ::= PGICOMPARE ( <accel data list> )

.CE
.GS 2 "CROSS REFERENCE OF SYMBOLS"

.. code-block:: none


    %    697  703  717  718  722  723  725  726  729  730  732  860  984
    %FILL     250
    %LOC      668  698  704  861  985
    &    714  871
    '$' 1215
    '(/'      672
    '/)'      673
    '//'      280  455  813
    '<'  154  155  167  168  184  186 1637 1638
    '<<<'     862 1695 1696
    '=>'      425  477  478  484  548  549  563  617  915 1016
    '>'  154  155  167  168  184  186 1637 1638
    '>>>'     862 1695 1696
    (     25   26   30   31   36   38   39   41   42   54   57   58   95
         122  129  134  144  152  153  154  155  161  162  165  172  173
         174  175  176  177  178  185  186  211  212  213  214  218  232
         255  299  303  337  351  352  358  396  397  408  415  416  419
         420  425  436  437  441  478  478  485  486  507  517  519  527
         542  548  553  559  567  568  569  570  571  572  573  574  575
         576  577  578  579  580  581  582  585  589  604  605  606  607
         626  630  646  650  653  668  674  691  695  700  701  715  719
         720  727  732  757  758  840  847  854  855  857  858  911  912
         916  917  923  929  938  950  962  963  970  971  975  976  977
         983  986 1017 1136 1137 1139 1180 1227 1229 1254 1326 1346 1352
        1354 1359 1361 1362 1363 1365 1367 1368 1371 1375 1376 1379 1380
        1382 1383 1384 1385 1386 1387 1390 1400 1401 1402 1407 1421 1422
        1423 1424 1427 1430 1433 1436 1437 1442 1445 1446 1516 1532 1545
        1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558
        1560 1561 1563 1565 1567 1569 1570 1573 1574 1575 1576 1577 1579
        1580 1583 1584 1586 1588 1590 1591 1592 1593 1594 1595 1596 1597
        1598 1599 1600 1602 1603 1604 1605 1608 1609 1610 1611 1633 1637
        1641 1653 1654 1655 1656 1657 1662 1663 1664 1665 1666 1667 1669
        1670 1672 1674 1675 1676 1677 1678 1680 1682 1683 1685 1692 1693
        1721 1722 1726 1727 1728 1731 1732 1733 1734
    )     25   26   30   31   36   38   39   41   42   54   57   58   95
         122  129  134  144  152  153  154  155  161  162  165  172  173
         174  175  176  177  178  185  186  211  212  213  214  218  232
         254  269  270  299  303  318  326  337  351  352  358  363  371
         396  397  408  415  416  419  420  425  427  436  437  441  478
         478  485  486  507  517  519  527  542  548  553  559  567  568
         569  570  571  572  573  574  575  576  577  578  579  580  581
         582  585  589  604  605  606  607  626  630  646  650  653  668
         669  682  684  695  700  701  715  719  720  727  732  753  757
         758  840  847  851  854  855  857  858  885  890  891  892  904
         911  912  916  917  923  929  938  946  950  962  963  970  971
         975  976  977  983  986 1006 1007 1017 1032 1033 1034 1048 1049
        1052 1053 1117 1118 1122 1127 1130 1134 1135 1136 1137 1139 1161
        1179 1196 1197 1223 1227 1229 1254 1326 1346 1352 1354 1359 1361
        1362 1363 1365 1367 1368 1371 1375 1376 1379 1380 1382 1383 1384
        1385 1386 1387 1390 1400 1401 1402 1407 1421 1422 1423 1424 1427
        1430 1433 1436 1437 1442 1445 1446 1516 1532 1545 1546 1547 1548
        1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1560 1561 1563
        1565 1567 1569 1570 1573 1574 1575 1576 1577 1579 1580 1583 1584
        1586 1588 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600
        1602 1603 1604 1605 1608 1609 1610 1611 1633 1637 1641 1653 1654
        1655 1656 1657 1662 1663 1664 1665 1666 1667 1669 1670 1672 1674
        1675 1676 1677 1678 1680 1682 1683 1685 1692 1693 1700 1701 1702
        1706 1707 1708 1721 1722 1726 1727 1728 1731 1732 1733 1734
    \*     71  200  214  229  234  260  261  343  611  637  638  713  773
         864  870  936  937 1063 1097 1113 1115 1224 1415 1624 1698 1701
        1704 1707 1712
    \*\*   447  780  781
    +    198  764
    ,     58   60   68   72  129  163  181  187  206  238  239  240  243
         246  251  257  269  271  278  284  288  291  293  297  300  315
         327  334  337  337  339  340  356  358  360  365  366  397  398
         403  404  412  421  428  467  468  469  471  475  481  490  495
         497  503  513  523  532  533  545  555  556  560  583  592  594
         609  615  620  622  627  632  640  647  679  682  684  685  689
         692  707  842  848  850  863  866  878  914  930  945  953  957
         967  979  991  992  993  994  995  996 1009 1018 1038 1041 1043
        1054 1055 1064 1123 1123 1125 1126 1127 1130 1131 1135 1147 1198
        1199 1398 1409 1411 1613 1617 1619 1622 1631 1639 1644 1648 1687
        1696 1709 1710 1715
    -    199  273  765
    .    304  443  443  479  479  488  488  696  702  859 1163 1168 1170
        1178 1181 1182 1183 1185 1190 1191
    ..   264
    .AND.     451  792 1416
    .EQ.      805
    .EQV.     456 1418
    .GE.      806
    .GT.      807
    .LE.      808
    .LT.      809
    .N.  453  798
    .NE.      810
    .NEQV.    457 1419
    .NOT.     452  797
    .O.  450  788
    .OR.      449  787 1417
    .X.  458
    .XOR.     459
    /    201  248  248  281  281  283  283  307  307  312  312  321  321
         333  333  774 1148
    :     31   85  168  189  230  235  260  262  263  265  468  469  496
         500  596  607  635  636  646  646  683  711  736  757  758  887
         912  917  934  935  944  955  973 1000 1007 1012 1013 1014 1149
        1380 1412 1422 1423 1424 1432 1435 1439 1444 1532 1560 1583 1605
        1615 1650
    ::   112  245  463  465  471  472  494  613  677  678  952  976  986
    <END stmt>      74
    <Hollerith>    748 1152
    <aformat>     1171
    <cmplx comma>  753
    <complex>      743
    <dcomplex>     744
    <defined op>   444  480  489  778  814
    <dformat>     1189
    <dimattr>      208  371
    <directive>     18
    <dlp>    1196 1197
    <double>  741
    <dtformat>    1192
    <eformat>     1187
    <empty file>    14
    <fformat>     1186
    <fmtstr> 1138
    <g0format>    1194
    <gformat>     1188
    <half>    739
    <id name>       34   36   36   38   38   39   39   60   61  129  241
                   396  397  397  415  416  419  420  420  468  469  478
                   478  485  486  499  500  502  510  517  558  559  616
                   634  636  638  649  650  652  653  710  732  869  933
                   935  937 1270 1324 1326 1352 1367 1380 1380 1382 1404
                  1407 1422 1423 1423 1424 1424 1424 1430 1440 1441 1443
                  1444 1718
    <iformat>     1174
    <implp>   269  270
    <int kind const>    345  738
    <integer>       59  231  344  737  756  845 1198 1199 1200 1201 1222
    <iolp>   1032 1033 1034 1048 1049 1052 1053 1117 1118 1122
    <kanji string>      752  758 1151
    <letter>  273  273  274
    <lformat>     1173
    <log const>    749
    <log kind const>    750
    <mp atomic>   1452
    <mp barrier>  1241
    <mp cancel>   1270
    <mp cancellationpoint>  1324
    <mp critical> 1235
    <mp declarereduction>    645
    <mp declaresimd>    642
    <mp declaretarget>  643
    <mp distpardo>     1469
    <mp distpardosimd> 1470
    <mp distribute>    1467
    <mp distsimd> 1468
    <mp doacross> 1453
    <mp dosimd>   1459
    <mp endatomic>     1265
    <mp endcritical>   1236
    <mp enddistpardo>  1289
    <mp enddistpardosimd>   1291
    <mp enddistribute> 1285
    <mp enddistsimd>   1287
    <mp enddosimd>     1272
    <mp endmaster>     1243
    <mp endordered>    1256
    <mp endparallel>   1234
    <mp endpardo> 1247
    <mp endpardosimd>  1293
    <mp endparsections>     1249
    <mp endparworkshare>    1260
    <mp endpdo>   1240
    <mp endsections>   1252
    <mp endsimd>  1274
    <mp endsingle>     1238
    <mp endtarget>     1281
    <mp endtargetdata> 1276
    <mp endtargpar>    1295
    <mp endtargpardo>  1297
    <mp endtargpardosimd>   1301
    <mp endtargparsimd>     1299
    <mp endtargsimd>   1303
    <mp endtargteams>  1305
    <mp endtargteamsdist>   1311
    <mp endtargteamsdistpardo>   1317
    <mp endtargteamsdistpardosimd>    1321
    <mp endtargteamsdistsimd>    1313
    <mp endtask>  1262
    <mp endtaskgroup>  1323
    <mp endtaskloop>   1267
    <mp endtaskloopsimd>    1269
    <mp endteams> 1283
    <mp endteamsdist>  1307
    <mp endteamsdistpardo>  1315
    <mp endteamsdistpardosimd>   1319
    <mp endteamsdistsimd>   1309
    <mp endworkshare>  1258
    <mp flush>    1253 1254
    <mp master>   1242
    <mp ordered>  1255
    <mp parallel> 1347
    <mp pardo>    1454
    <mp pardosimd>     1471
    <mp parsections>   1455
    <mp parworkshare>  1457
    <mp pdo> 1451
    <mp section>  1251
    <mp sections> 1456
    <mp simd>     1460
    <mp single>   1450
    <mp target>   1464
    <mp targetdata>    1461
    <mp targetenterdata>    1462
    <mp targetexitdata>     1463
    <mp targetupdate>  1465
    <mp targpar>  1472
    <mp targpardo>     1473
    <mp targpardosimd> 1475
    <mp targparsimd>   1474
    <mp targsimd> 1476
    <mp targteams>     1477
    <mp targteamsdist> 1480
    <mp targteamsdistpardo> 1483
    <mp targteamsdistpardosimd>  1485
    <mp targteamsdistsimd>  1481
    <mp task>     1458
    <mp taskgroup>     1322
    <mp taskloop> 1486
    <mp taskloopsimd>  1487
    <mp taskwait> 1263
    <mp taskyield>     1264
    <mp teams>    1466
    <mp teamsdist>     1478
    <mp teamsdistpardo>     1482
    <mp teamsdistpardosimd> 1484
    <mp teamsdistsimd> 1479
    <mp threadprivate>  122
    <mp workshare>     1257
    <named construct>   888
    <nformat>     1172
    <nonddec const>     747
    <nondec const>      746
    <oformat>     1175
    <qcomplex>     745
    <quad>    742
    <quoted string>      15  397  501  605  754  755  756
    <real>    740
    <red type>     647  648
    <underscore>   755  756
    <zformat>     1176
    =    241  290  291  292  295  337  397  416  437  486  634  636  638
         649  652  686  710  838  869  876  933  935  937  945  955  991
         992  993  994  995  996 1048 1057 1058 1059 1060 1061 1067 1068
        1069 1070 1071 1072 1073 1074 1076 1077 1078 1079 1080 1081 1082
        1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095
        1098 1099 1100 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111
        1404 1405 1718
    A   1164
    ABSTRACT  390  409  434
    ACCATOMIC     1523
    ACCATOMICCAPTURE   1527
    ACCATOMICREAD 1525
    ACCATOMICUPDATE    1524
    ACCATOMICWRITE     1526
    ACCATTACH     1608
    ACCDATA  1491 1519 1520
    ACCDATAREGION 1492
    ACCDECL   138
    ACCDETACH     1609
    ACCDO    1493
    ACCENDATOMIC  1528
    ACCENDDATA    1510
    ACCENDDATAREGION   1509
    ACCENDDO 1522
    ACCENDHOSTDATA     1518
    ACCENDKERNDO  1504
    ACCENDKERNELS 1503
    ACCENDKERNLOOP     1505
    ACCENDLOOP    1521
    ACCENDPARALLEL     1506
    ACCENDPARDO   1507
    ACCENDPARLOOP 1508
    ACCENDREGION  1502
    ACCENDSCALAR  1514
    ACCENDSCALARREGION 1512
    ACCENDSERIAL  1534
    ACCENDSERIALLOOP   1536
    ACCENTER 1519
    ACCEPT   1042 1043
    ACCESS   1070
    ACCEXIT  1520
    ACCFINALIZE   1606
    ACCHOSTDATA   1517
    ACCIFPRESENT  1607 1673
    ACCIN    1579 1665
    ACCINIT  1529
    ACCKERNELS    1489
    ACCKERNELSDO  1497
    ACCKERNELSLOOP     1498
    ACCLOOP  1494
    ACCOUT   1580 1666
    ACCPARALLELDO 1499
    ACCPARALLELLOOP    1500
    ACCPOLICY      166
    ACCREGION     1488 1513
    ACCREGIONDO   1495
    ACCREGIONLOOP 1496
    ACCSCALAR     1513
    ACCSCALARREGION    1511
    ACCSERIAL     1533
    ACCSERIALLOOP 1535
    ACCSET   1723
    ACCSHAPE  151
    ACCSHUTDOWN   1530
    ACCTILE  1602
    ACCUPDATE     1575 1576 1577 1579 1580 1652
    ACCUPDATEDEV  1655 1676
    ACCUPDATEHOST 1653 1674
    ACCUPDATEIN   1656 1677
    ACCUPDATEOUT  1657 1678
    ACCUPDATESELF 1654 1675
    ACCWAIT  1515 1581 1599 1629 1671 1672
    ACTION   1079
    ADVANCE  1098
    ALIAS     495  496
    ALIGN     996
    ALIGNED  1433
    ALLOCATABLE    111  370
    ALLOCATE  975  976
    ALWAYS   1441
    ASSIGN    846
    ASSIGNMENT     437  440
    ASSOCIATE      911  912
    ASYNC    1589 1590 1668 1669 1684 1685
    ASYNCHRONOUS   137  389 1106
    ATTRIBUTES      54  134  494
    AUTO     1601
    AUTOMATIC      125  379
    B   1177 1178
    BACKSPACE     1029
    BIND       36   37   38  127  129  381  406  536  604  605
    BLANK    1073
    BLOCK      84   85
    BLOCKDATA       27   28
    BN  1210
    BYTE      227
    BZ  1211
    CACHE    1516 1532 1558
    CALL      852  853  854  855
    CAPTURE  1333
    CASE     1008
    CASEDEFAULT    905
    CHARACTER      225
    CHUNK    1405
    CLASS     213  214
    CLASSDEFAULT   939
    CLASSIS   938
    CLOSE    1032
    COLLAPSE 1363 1588 1605
    COMMON     90
    COMPARE  1611 1733
    COMPLEX   222
    CONCURRENT     949
    CONSTANT  387
    CONTAINS   17
    CONTIGUOUS     142  394
    CONTINUE  822
    CONVERT  1100
    COPY      176  570 1573
    COPYIN    174  567 1361 1545
    COPYOUT   175  568 1546
    COPYPRIVATE   1346
    CREATE    172  573 1548
    CYCLE    1005
    D   1185
    DATA       97
    DC  1212
    DEALLOCATE     977
    DECIMAL  1107
    DECLARE   139
    DECODE   1046 1047
    DEFAULT   161  963 1352 1603
    DEFAULTKIND    509
    DEFAULTMAP    1380
    DEFAULT_ASYNC 1728
    DELETE   1597
    DELIM    1080
    DEPEND   1442
    DEVICE    384 1376 1577 1664
    DEVICEID 1596 1670 1683
    DEVICEPTR      178  580 1555
    DEVICE_NUM    1721 1727 1731
    DEVICE_RESIDENT     581
    DEVICE_TYPE    606 1600 1722 1726 1732
    DIMENSION      207
    DIRECT   1088
    DISPOSE  1074
    DISTRIBUTE    1025
    DISTRIBUTEPOINT    1024
    DIST_SCHEDULE 1382
    DO   943  944 1688
    DOUBLECOMPLEX  223
    DOUBLEPRECISION     221
    DP  1213
    DT  1193
    E   1182 1184
    ELEMENTAL       53
    ELSE      893
    ELSEIF    940
    ELSEWHERE      969  970
    EN  1190
    ENCODE   1044 1045
    ENCODING 1108
    END    0    0
    ENDASSOCIATE   908
    ENDBLOCK   86
    ENDBLOCKDATA    75
    ENDDO     897
    ENDENUM   131
    ENDFILE  1030
    ENDFORALL      902
    ENDFUNCTION     76
    ENDIF     894
    ENDINTERFACE   460  461
    ENDMAP    106
    ENDMODULE       77
    ENDPROCEDURE    81
    ENDPROGRAM      78
    ENDSELECT      906
    ENDSTRUCTURE   101
    ENDSUBMODULE    80
    ENDSUBROUTINE   79
    ENDTYPE   108
    ENDUNION  104
    ENDWHERE  900
    ENTRY      66
    ENUM      129
    ENUMERATOR     130
    EOR 1099
    EQUIVALENCE     96
    ERR 1058
    ERRMSG    993
    ERRORSTOP      877  878
    ES  1191
    EXCLUDE   608
    EXIST    1083
    EXIT     1002
    EXTENDS   408
    EXTERNAL   91  372
    End 1094
    F   1181
    FILE     1068
    FINAL     621 1365
    FIRSTPRIVATE  1401 1557
    FLUSH    1050
    FMT 1092
    FORALL    999 1000
    FORM     1071
    FORMAT   1138 1140
    FORMATTED     1089
    FROM     1446
    FUNCTION   44   45
    G   1183
    GANG      599  607 1586 1587
    GENERIC   613
    GOTO      884  890
    GOTOX     840  841  847
    GRAINSIZE     1383
    HOST     1567 1568 1575 1662
    I   1162 1163
    ID  1102
    IF   886  887 1421 1422 1423 1424 1569 1667 1682
    IGNORE_TKR     511  512
    IMPLICIT   89
    IMPORT    520
    IMPURE     55
    INBRANCH 1373
    INCLUDE    15
    INDEPENDENT   1571
    INIT_NEEDED    162
    INQUIRE  1034 1048
    INTEGER   219
    INTENT    419  420
    INTERFACE      433  434
    INTRINSIC       92  374  473
    IOLENGTH 1048
    IOMSG    1060
    IOSTAT   1059
    IS_DEVICE_PTR 1379
    KERNEL   1572 1688
    KIND      392
    L   1166
    LASTPRIVATE   1402
    LAUNCHBOUNDS    57   58
    LEN  393
    LINEAR   1427
    LINK      582 1375
    LOCAL     507  569  964 1547
    LOCAL_INIT     965
    LOGICAL   224
    MANAGED   395
    MAP  105
    MERGEABLE     1366
    MIRROR    571 1574
    MODULE     29   56  462  463
    MOLD      995
    MOVEDESC  510
    MP_MAP   1437
    MP_SCHEDTYPE  1404
    N   1165
    NAME     1069
    NAMED    1086
    NAMELIST   99
    NCHARACTER     226
    NEWUNIT  1061
    NEXTREC  1091
    NML 1095
    NOGROUP  1388
    NOHOST    603
    NONE      268  963
    NON_INTRINSIC  474
    NOPASS    543
    NOSEQUENCE     418
    NOTINBRANCH   1374
    NOWAIT   1340 1582 1630
    NO_CREATE      173 1610
    NULLIFY  1017
    NUMBER   1085
    NUM_GANGS     1593
    NUM_TASKS     1384
    NUM_TEAMS     1386
    NUM_THREADS   1362
    NUM_WORKERS   1592
    O   1167 1168
    OPEN     1033
    OPENED   1084
    OPERATOR  436  439
    OPTIONAL  115  375  538
    OPTIONS    16
    ORDERED  1358
    P   1159 1160
    PAD 1081
    PARALLEL 1490 1563 1564
    PARAMETER       95   98  368
    PASS      541  542
    PAUSE     881
    PCOPY     575 1550
    PCOPYIN   576 1551
    PCOPYOUT  577 1552
    PCREATE   579 1554
    PDELETE  1598
    PENDING  1103
    PGICOMPARE    1734
    PINNED    385  991
    PLOCAL    578 1553
    PNOT     1604
    POINTER   110  376  539
    POS 1104
    POSITION 1082
    PREFETCH 1023
    PRESENT   574 1549
    PRINT    1037 1038
    PRIORITY 1385
    PRIVATE   411 1400 1556
    PROCEDURE      462  463  464  465  527
    PROC_BIND     1367
    PROGRAM    46
    PROTECTED      136  388  544
    PUBLIC    410
    PURE       52
    Q   1214
    QUIET     876
    RC  1220
    RD  1217
    READ     1039 1040 1041 1076 1331
    READONLY 1075
    READWRITE     1078
    REAL      220
    REC 1093
    RECL     1072
    RECORD    102
    RECURSIVE       51
    REDUCTION     1359 1591
    REFLECTED      572
    RETURN    873  874
    REWIND   1031
    RN  1219
    ROUND    1111
    ROUTINE   143  144
    RP  1221
    RU  1216
    RZ  1218
    S   1207
    SAFELEN  1368
    SAVE       93   94  377  540
    SCHEDULE 1403
    SELECTCASE    1006 1007
    SELECTTYPE     916  917
    SELF     1576 1663
    SEQ  602 1565 1566
    SEQUENCE  417
    SEQUENTIAL    1087
    SEQ_CST  1339
    SHARED    386  966 1101 1354
    SHORTLOOP     1559
    SIGN     1109
    SIMD     1395
    SIMDLEN  1371
    SIZE     1105
    SOURCE    994
    SP  1208
    SS  1209
    STAT      992
    STATIC    126  380
    STATUS   1067
    STOP      875
    STREAM   1110
    STRUCTURE      100
    SUBMODULE       30   31
    SUBROUTINE      43
    T   1202
    TARGET    116  378
    TCONTAINS      135
    TEXTURE   391
    THEN      891  892
    THREADS  1396
    THREAD_LIMIT  1387
    TL  1203
    TO   846 1445
    TPROCEDURE     551
    TR  1204
    TYPE      107  165  212
    TYPEIS    923
    UNFORMATTED   1090
    UNIFORM  1436
    UNION     103
    UNIT     1057
    UNROLL   1570
    UNTIED   1364
    UPDATE    177 1330
    USE  119
    USE_DEVICE    1595
    VALUE     147  382
    VECTOR    601 1560 1561 1562
    VECTOR_LENGTH 1594
    VOLATILE  109  383
    WAIT     1049
    WHERE     972  973
    WHILE     948
    WORKER    600 1583 1584 1585
    WRITE    1035 1036 1077 1332
    X   1205 1206
    Z   1169 1170
    <AND opr1>     792 -793
    <F1 item>     1153-1161-1162-1163-1164-1165-1166-1167-1168-1169-1170
                 -1171-1172-1173-1174-1175-1176-1177-1178-1179
    <F2 item>     1154-1181-1182-1183-1184-1185-1186-1187-1188-1189-1190
                 -1191-1192-1193-1194
    <F3 item>     1156-1202-1203-1204-1205-1206-1207-1208-1209-1210-1211
                 -1212-1213-1214-1215-1216-1217-1218-1219-1220-1221
    <GOTO assignment>   817 -846
    <GOTO stmt>      8 -884
    <IF clause>   -885  889
    <IO stmt>      826-1029-1030-1031-1032-1033-1034-1035-1036-1037-1038
                 -1039-1040-1041-1042-1043-1044-1045-1046-1047-1048-1049
                 -1050
    <OR opr1>      787  788 -789
    <SYSTEM GOAL SYMBOL>       0
    <ac beg>  670 -672
    <ac end>  670 -673
    <ac item>      679  680 -681 -682 -683 -684
    <ac list>      676  677  679 -679 -680  682  684
    <ac spec>      670 -675 -676 -677 -678
    <acc gang arg>     1612 1613-1614-1615
    <acc gang args>    1586-1612 1613-1613
    <acc init attr>    1720-1721-1722
    <acc shutdown attr>     1730-1731-1732
    <accel add opr>     196 -198 -199  202
    <accel attr>  1543 1544-1545-1546-1547-1548-1549-1550-1551-1552-1553
                 -1554-1555-1556-1557-1558-1559-1560-1561-1562-1563-1564
                 -1565-1566-1567-1568-1569-1570-1571-1572-1573-1574-1575
                 -1576-1577-1578-1579-1580-1581-1582-1583-1584-1585-1586
                 -1587-1588-1589-1590-1591-1592-1593-1594-1595-1596-1597
                 -1598-1599-1600-1601-1602-1603-1604-1605-1606-1607-1608
                 -1609-1610-1611
    <accel begin>  148 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497
                  1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508
                  1511 1512 1513 1515 1516 1517 1519 1520 1521 1522 1523
                  1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534
                  1535 1536 1537-1539
    <accel compare dir>     1537-1733
    <accel data list>  1438 1439 1516 1545 1546 1547 1548 1549 1550 1551
                       1552 1553 1554 1573 1575 1576 1577 1579 1580 1597
                       1598 1604 1608 1609 1610 1611 1631-1631-1632 1653
                       1654 1655 1656 1657 1662 1663 1664 1665 1666 1674
                       1675 1676 1677 1678 1733 1734
    <accel data name>   715 -716  717 -717 -718 1633 1634 1637 1638
    <accel data ss>    -715  718
    <accel data>  1631 1632-1633-1634-1635-1636-1637-1638
    <accel decl attr>   565  566 -567 -568 -569 -570 -571 -572 -573 -574
                       -575 -576 -577 -578 -579 -580 -581 -582
    <accel decl begin>  138  139  143  144 -564
    <accel decl data list>   567  568  569  570  573  574  575  576  577
                        578  579  581  582  583 -583 -584
    <accel decl data name>   585  586  719 -721  722 -722 -723
    <accel decl data ss>    -719  723
    <accel decl data>   583  584 -585 -586 -587 -588
    <accel decl list>   138  139  565 -565 -566
    <accel decl sub list>    585  589  594 -594 -595  719  720
    <accel decl sub>    594  595 -596 -597
    <accel dp addexp>   194 -196
    <accel dp bnd>      189  189  190 -191 -192 -193
    <accel dp bndexp1>  193 -202
    <accel dp bndexp>   192 -194 -195
    <accel dp mulexp>   195 -197  202
    <accel dp sbnd>     191  196  196  197  197  202 -203 -204
    <accel dp stmts>    148 -149 -150
    <accel dpdefault attr>   158 -161  179
    <accel dpinit_needed attr>    159 -162
    <accel dpinitvar list>   162  163 -163 -164
    <accel dptype attr>      160 -165  180
    <accel dpvar bnd>   187  188 -189 -190
    <accel dpvar bnds>  185  186  187 -187 -188
    <accel dpvar>  181  182 -183 -184 -185 -186
    <accel dpvarlist>   152  153  154  155  172  173  174  175  176  177
                        178  181 -181 -182
    <accel list>  1542 1543-1543-1544
    <accel mdata list> 1555 1556 1557 1558 1574 1595 1639-1639-1640
    <accel mdata name>  727 -728  729 -729 -730 1641 1642
    <accel mdata ss>   -727  730
    <accel mdata> 1639 1640-1641-1642-1643
    <accel mdecl data list>  571  572  580  592 -592 -593
    <accel mdecl data name>  589  590  720 -724  725 -725 -726
    <accel mdecl data ss>   -720  726
    <accel mdecl data> -589 -590 -591  592  593
    <accel mul opr>     197 -200 -201
    <accel policy attr list>      169  170 -170 -171
    <accel policy attr>      170  171 -172 -173 -174 -175 -176 -177 -178
                       -179 -180
    <accel policy declstmt>  150 -166
    <accel policy dir>  166 -169
    <accel policy name>      166 -167 -168
    <accel routine list>     143  144 -598  599 -599  600 -600  601 -601
                        602 -602  603 -603  604 -604  605 -605  606 -606
                        607 -607  608 -608
    <accel sdata list> 1532 1644-1644-1645
    <accel sdata name> -731 1646
    <accel sdata> 1644 1645-1646-1647
    <accel setdev attr>     1724 1725-1726-1727-1728
    <accel setdev dir> 1531-1723
    <accel setdev list>     1723-1724 1725-1725
    <accel shape attr>  156  157 -158 -159 -160
    <accel shape attrs>      153  155  156 -156 -157
    <accel shape declstmt>   149 -151
    <accel shape dir>   151 -152 -153 -154 -155
    <accel short update>    1578-1674-1675-1676-1677-1678
    <accel stmt>   835-1488-1489-1490-1491-1492-1493-1494-1495-1496-1497
                 -1498-1499-1500-1501-1502-1503-1504-1505-1506-1507-1508
                 -1509-1510-1511-1512-1513-1514-1515-1516-1517-1518-1519
                 -1520-1521-1522-1523-1524-1525-1526-1527-1528-1529-1530
                 -1531-1532-1533-1534-1535-1536-1537-1538
    <accel sub list>    715  727 1633 1637 1641 1648-1648-1649
    <accel sub>   1648 1649-1650-1651
    <accel update attr>     1660 1661-1662-1663-1664-1665-1666-1667-1668
                      -1669-1670-1671-1672-1673
    <accel update dir> 1501-1652-1653-1654-1655-1656-1657
    <accel update list>     1652 1659-1660 1661-1661
    <accel wait list>  1599 1672 1680-1686 1687-1687
    <access list>  114  412 -412 -413
    <access spec>  114  120  369  407 -410 -411  535
    <access>  412  413 -414 -415 -416
    <accsize>     1615 1621 1622-1623-1624
    <accsizelist> 1602-1621 1622-1622
    <addition>     655  759 -761 -762 -763  803
    <addop list>   766 -766 -767  770  779
    <addop>   348  350  445  761  762 -764 -765  766  767 1160 1198 1200
             1414 1449
    <aligned clause>   1370-1433
    <aligned>     1433-1434-1435
    <alloc cntl item>   989  990 -991 -992 -993 -994 -995 -996
    <alloc cntl list>   988  989 -989 -990
    <alloc cntl>   975  976  977 -987 -988
    <alloc id list>     111  360 -360 -361
    <alloc id>     359  360  361 -362 -363
    <alloc list>   975  976  977  979 -979 -980
    <alloc obj>    981 -982  983 -983  984 -984  985 -985  986 -986
    <alloc object>      979  980 -981
    <alloc type>   976 -978
    <allocation stmt>   825 -975 -976 -977
    <alt name>     495  496  500 -501 -502
    <arg builtin>  712 -732  872
    <arg list>     855  866 -866 -867
    <arg>     866  867 -868 -869 -870 -871 -872
    <arith IF>     819 -848
    <arith expr>  -759 -760  761  762  811  813
    <arith>   848 -851
    <assigned GOTO>     816 -840 -841
    <assignment>   815  831 -838 1021
    <assoc or selector>      916  917 -918 -919
    <associate stmt>    907 -911 -912
    <association list>  911  912 -913  914 -914
    <association>  913  914 -915  918
    <attr list>    365  366 -366 -367
    <attr>    366  367 -368 -369 -370 -371 -372 -373 -374 -375 -376 -377
             -378 -379 -380 -381 -382 -383 -384 -385 -386 -387 -388 -389
             -390 -391 -392 -393 -394 -395
    <base type>    210  211  217  218 -219 -220 -221 -222 -223 -224 -225
                  -226 -227
    <begininterface>    431  432 -433 -434
    <bind attr>     36   37   38  127  381 -396 -397  406  536
    <bind entry>   398  399 -400 -401
    <bind list>    127  398 -398 -399
    <binding attr list>      555  556 -556 -557
    <binding attr>      556  557 -558 -559
    <binding name list>      550  560 -560 -561
    <binding name>      560  561 -562 -563
    <block stmt>    10  -84  -85  -86
    <call>    820 -852 -853 -854 -855
    <case begin>   903-1006-1007
    <case expr>   1011 1012 1013 1014 1014-1015
    <case value list>   904 1009-1009-1010
    <case value>  1009 1010-1011-1012-1013-1014
    <case>    904-1008
    <char expr>   -811 -812  813
    <char literal>      751 -754 -755 -756  757 1150 1195 1196
    <check construct>    85  887 -888  912  917  944  973 1000 1007
    <chevron>      853  854  855 -862
    <classdefault stmt>      922 -939
    <classis stmt>      921 -938
    <cmn ident list>    494  503 -503 -504 1361
    <cmn ident>    503  504 -505 -506 1398 1399
    <com dcl>      275  279 -280 -281 -282
    <common list>   90  275 -275 -276
    <common>  282 -283  286  329  400  492  505  588 1636
    <computed GOTO>     818 -847
    <concatenation>     662  804  812 -813
    <concurrent control>     953  954 -955
    <concurrent header>      947 -950  997
    <concurrent list>   950  953 -953 -954
    <concurrent locality>    947 -958 -959
    <concurrent type>   950 -951 -952
    <conjunction>  659  790 -792
    <constant>     203  347  348  587  591  667 -737 -738 -739 -740 -741
                  -742 -743 -744 -745 -746 -747 -748 -749 -750 -751 -752
                  -753 1449 1635 1643 1647
    <construct name>     86  892  893  894  897  900  902  904  905  906
                        908  923  938  939  969  970 1002-1003-1004 1005
    <control stmt>        9 -889 -890 -891 -892 -893 -894 -895 -896 -897
                       -898 -899 -900 -901 -902 -903 -904 -905 -906 -907
                       -908 -909 -910
    <cvar ref>     852 -856 -857 -858 -859 -860 -861
    <cycle stmt>   828-1005
    <data constant>     342  343 -347 -348 -349 -350 -351 -352 -353
    <data item>    340  341 -342 -343
    <data rpt>     343 -344 -345 -346
    <data type>     62   63   64   65   87  112 -210 -211 -212 -213 -214
                   269  270  530
    <dcl id list>   88  251 -251 -252  277  278  280  281  282
    <dcl id>  248  249  251  252 -253 -254  358  430
    <dec declaration>   123 -494 -495 -496
    <declaration>    6  -87  -88  -89  -90  -91  -92  -93  -94  -95  -96
                   -97  -98  -99 -100 -101 -102 -103 -104 -105 -106 -107
                  -108 -109 -110 -111 -112 -113 -114 -115 -116 -117 -118
                  -119 -120 -121 -122 -123 -124 -125 -126 -127 -128 -129
                  -130 -131 -132 -133 -134 -135 -136 -137 -138 -139 -140
                  -141 -142 -143 -144 -145 -146 -147 -148
    <declare reduction>      644 -646
    <declare simd name>     1225-1226-1227
    <declare simd>      642-1225
    <declare target>    643-1228-1229-1230
    <declarered begin>  644 -645
    <defined binary>    664 -814
    <defined unary>     665  777 -778
    <depend attr> 1442-1443-1444
    <depend clause>    1378 1397-1442
    <depend data list> 1444-1447-1448
    <depend data> 1448-1449
    <derived type spec>      925 -926 -927
    <devtype attr>      609  610 -611 -612
    <devtype list>      606  609 -609 -610 1600 1722 1732
    <dflt>    509 -518 -519
    <dim beg>      254 -255  318  326  363  371  427
    <dim list>     256  257 -257 -258
    <dim spec>     257  258 -259 -260 -261 -262 -263 -264
    <dimension list>    254 -256  318  326  363  371  427
    <dimkeyword>    88 -207 -208
    <dinit const list>  248  333  340 -340 -341
    <dinit list>    97  331 -331 -332
    <dinit var list>    333  334 -334 -335  337
    <dinit var>    334  335 -336 -337
    <dinit>   331  332 -333
    <disjunction>  658  785 -787 -788
    <distpardo begin>  1288-1469
    <distpardosimd begin>   1290-1470
    <distribute begin> 1284-1467
    <distsimd begin>   1286-1468
    <do begin>     895  896 -941 -942
    <do construct>      941  942 -943 -944
    <doacross begin>   1245-1453
    <doconcurrent>      947 -949
    <dosimd begin>     1271-1459
    <dowhile>      946 -948
    <dt vlist>    1196 1197 1198-1198 1199-1199-1200-1201
    <dts>    1193-1195-1196-1197
    <dvar ref>     336 -694  695 -695  696 -696  697 -697  698 -698
    <e3>      337 -338 -339
    <elp>     669 -674  682  684  753  904 1127 1130 1134 1135 1700 1701
             1702 1706 1707 1708
    <elseif>  892 -940
    <elsewhere clause>  899 -969 -970
    <encode ctl>  1122-1124-1125
    <encode spec> 1044 1045 1046 1047-1122
    <encode unit> 1122-1123
    <end accel attr>   1627 1628-1629-1630
    <end accel list>   1626 1627-1627-1628
    <end interface>     118 -460 -461
    <end stmt>      13  -74  -75  -76  -77  -78  -79  -80  -81
    <end>      13  -23
    <endsingle item>   1343 1344-1345-1346
    <endsingle list>   1342 1343-1343-1344
    <entity decl list>  112  421 -421 -422
    <entity decl>  421  422 -423 -424 -425
    <entity id>    423  424  425 -426 -427
    <entry id>      40   41   42  -66
    <entry statement>     5  -40  -41  -42
    <enum>    293  294 -295 -296
    <enums>   130  293 -293 -294
    <equiv group>  297  298 -299
    <equiv groups>       96  297 -297 -298
    <equiv list>   299  300 -300 -301
    <equiv var>    300  301 -302  303 -303  304 -304
    <eqv or neqv>  660  783 -784
    <error stop pause>  877  878 -879 -880
    <error stop stmt>   837 -877 -878
    <etmp e3>      685 -688 -689  945
    <etmp exp>     685  685 -687  689  847  945  945
    <etmp lp>     -691  851  885  890  891  940  946 1006 1007
    <etmp>    687 -690
    <exit stmt>    827-1002
    <explicit shape>    259 -265 -266
    <exponentiation>    657  775 -780 -781  801
    <expression list>   862  863 -863 -864 -865
    <expression>   233  260  263  265  265  266  288  289  291  292  295
                   337  337  339  424  597  607  633  634  649  652 -654
                  -655 -656 -657 -658 -659 -660 -661 -662 -663 -664 -665
                   668  669  681  683  683  684  687  709  710  732  734
                   736  753  753  814  838  851  863  865  868  869  874
                   876  880  883  885  890  891  892  915  919  932  933
                   946  955  955  974  994  995  996 1006 1007 1015 1016
                  1062 1067 1068 1069 1070 1071 1072 1073 1074 1079 1080
                  1081 1082 1093 1096 1098 1100 1104 1106 1107 1108 1109
                  1111 1112 1114 1123 1129 1362 1363 1365 1368 1371 1376
                  1383 1384 1385 1386 1387 1390 1405 1409 1411 1421 1422
                  1423 1424 1432 1435 1560 1561 1563 1565 1567 1569 1570
                  1583 1584 1588 1590 1592 1594 1596 1605 1614 1616 1617
                  1618 1619 1620 1623 1651 1667 1669 1670 1682 1683 1685
                  1686 1687 1693 1699 1705 1713 1717 1718 1721 1727 1728
                  1731
    <factor>  769  771 -775 -776 -777  779  780
    <fcn name>      45  -67
    <ffield> 1158 1159 1160 1162 1163 1163 1164 1165 1166 1167 1168 1168
             1169 1170 1170 1177 1178 1178 1181 1181 1182 1182 1183 1183
             1184 1185 1185 1190 1190 1191 1191 1202 1203 1204 1205-1222
    <fid or nid> -1114-1115 1116 1119 1121
    <field name>   315  316 -317 -318
    <field namelist>    314  315 -315 -316
    <final list>   621  622 -622 -623
    <final subroutines>      141 -621
    <final>   622  623 -624
    <firstprivate>     1355-1401
    <flp>    1161 1179-1180 1223
    <forall assn stmt>  832-1021-1022
    <forall begin>      997 -998
    <forall clause>     832  901 -997
    <forall construct>  998 -999-1000
    <formal list>   26   42   68  -68  -69
    <formal>   68   69  -70  -71
    <format id>   1092-1112-1113 1120 1123
    <format item> 1141 1142 1144-1147-1148-1149-1150-1151-1152-1153-1154
                 -1155-1156
    <format list unl>  1139 1143 1144-1145-1146 1179
    <format list> 1136 1141-1141-1142-1143-1144 1145 1161 1223
    <format stmt>   11-1136-1137-1138-1139
    <format> 1136 1137 1139-1140
    <func prefix>   45  -62  -63  -64  -65
    <func suffix>   25   26  -35  -36  -37  -38  -39   41   42
    <gangsize2>   1617-1618-1619
    <gangsize3>   1619-1620
    <gangsizes>   1593-1616-1617
    <gen access spec>   615 -616
    <generic binding list>   617 -619  620 -620
    <generic binding name>  -618  619  620
    <generic binding>   613 -617
    <generic name>      435 -438 -439 -440 -441
    <generic spec>      432 -435 -436 -437  461  617
    <generic type procedure>      140 -613
    <get module>   466  467  468  469 -470 -471 -472
    <id name list>       54   60  -60  -61  134
    <id>       28   29   30   30   31   31   31   33  -34   43   44   46
               66   67   70  107  212  213  401  408  425  470  471  472
              529  548  549  553  559  562  563  563  618  624  627  628
              696  697  702  703  717  718  722  723  725  726  729  730
              755  859  860  915  984 1004 1227
    <idc eq>  685 -686
    <ident constant>    346  349  350 -355
    <ident list>    72  -72  -73   91   92  113  115  125  126  134  136
                   137  142  147  462  463  464  465  507  519 1229 1254
                  1375 1379
    <ident ssa>    351  352 -354
    <ident>   -33   72   73   83  154  155  161  163  164  165  167  168
              168  183  184  184  185  186  186  204  205  206  216  253
              254  283  287  288  289  291  292  295  296  302  304  307
              310  312  317  318  322  325  326  330  337  354  355  358
              362  363  414  426  427  438  441  441  443  477  477  479
              483  484  484  488  493  495  496  506  515  525  542  547
              548  549  604  607  612  694  699  716  721  724  728  731
              840  841  853  854  855  856  928  967  968  982  986 1095
             1420 1449 1532 1560 1583 1603 1605 1615 1637 1638 1726
    <ideqc list>    95  288 -288 -289
    <if construct>      851  885 -886 -887  890  891
    <ignore tkr>   508 -511 -512
    <iii>     -19   93   94   97   99
    <implicit list>     267  269 -269 -270
    <implicit type>      89 -267 -268
    <implied do control>     682 -685 1130 1135
    <import name list>  522  523 -523 -524
    <import name>  523  524 -525
    <import>  128 -520
    <init beg>     288  289 -290  424
    <init com dcl>      276 -277 -278 -279
    <input item>  1131 1132-1133-1134-1135
    <input list>  1039 1041 1043 1046 1131-1131-1132 1134 1135
    <intent>  113  373 -419 -420  537
    <interface>    117 -431 -432
    <intrinsic op>      442 -445 -446 -447 -448 -449 -450 -451 -452 -453
                       -454 -455  487
    <intrinsic type>    215 -217 -218  924  952
    <io spec>     1035 1036 1039-1117
    <kernel begin>     1688-1689
    <kernel do arg>    1715-1716-1717-1718
    <kernel do args>   1696-1714 1715-1715
    <kernel do block shape> 1696-1703-1704-1705-1706-1707-1708
    <kernel do grid shape>  1696-1697-1698-1699-1700-1701-1702
    <kernel do list>   1688-1690
    <kernel do nest>   1690-1691-1692-1693
    <kernel do shape>  1690-1694-1695-1696
    <kernel shape expr>     1709 1709 1710-1711-1712-1713
    <kernel shape list>     1702 1708-1709 1710-1710
    <kernel stmt>  836-1688
    <label list>   840  842 -842 -843  847
    <label>   844 -845  941
    <lastprivate> 1356-1402
    <launchbound>   57   58   58  -59
    <len kind spec>     237  238  240  240 -241
    <len kind>     211  218 -236 -237 -238 -239 -240
    <len spec>     229  230 -231 -232
    <linear clause>    1369-1427
    <linear expr> 1427-1428
    <linear modifier>  1428-1429-1430
    <linear opt step>  1428-1431-1432
    <locality kind>     962 -964 -965 -966
    <locality name list>     962  967 -967 -968
    <locality spec list>     959  960 -960 -961
    <locality spec>     960  961 -962 -963
    <log disjunct>      782  784 -785 -786  789
    <log expr>    -782 -783  784  814
    <log factor>   791  792 -794 -795 -796  797  798
    <log negation>      661  794 -797 -798
    <log term>     786  787  788 -790 -791  793
    <loop control>      895 -945 -946 -947
    <map clause>  1377-1437
    <map item>    1437-1438-1439
    <map type>    1439-1440-1441
    <mask expr>    957  970  971 -974
    <module nature>     471 -473 -474
    <module procedure stmt>   32 -462 -463
    <motion clause>    1381-1445-1446
    <mp atomic begin>  1244-1452
    <mp begin>    1231-1232
    <mp decl begin>     146 -641
    <mp decl>      146 -642 -643 -644
    <mp stmt>     1231-1233-1234-1235-1236-1237-1238-1239-1240-1241-1242
                 -1243-1244-1245-1246-1247-1248-1249-1250-1251-1252-1253
                 -1254-1255-1256-1257-1258-1259-1260-1261-1262-1263-1264
                 -1265-1266-1267-1268-1269-1270-1271-1272-1273-1274-1275
                 -1276-1277-1278-1279-1280-1281-1282-1283-1284-1285-1286
                 -1287-1288-1289-1290-1291-1292-1293-1294-1295-1296-1297
                 -1298-1299-1300-1301-1302-1303-1304-1305-1306-1307-1308
                 -1309-1310-1311-1312-1313-1314-1315-1316-1317-1318-1319
                 -1320-1321-1322-1323-1324
    <msattr list>  494  497 -497 -498
    <msattr>  497  498 -499 -500
    <mult op>      446  771  772 -773 -774
    <multiplication>    656  768 -771 -772  802
    <n eqv op>     448 -456 -457 -458 -459  784
    <namelist group>    305  306 -307
    <namelist groups>    99  305 -305 -306
    <namelist list>     307  308 -308 -309
    <namelist var>      308  309 -310
    <new factor>   772 -779  781
    <new term>     762  763 -770
    <nii>       5    7    8    9   10   11   16   17  -20
    <nim>       5    7    8    9   10   11   16  -21
    <nis>      17   89   90   91   92   93   94   96   97   99  110  111
              117  118  119  125  126  128  129  130  131  136  137  138
              139  142  143  144  146  147 -209  507  508  509  510
    <nowait> 1328-1340 1345
    <null stmt>     12-1001
    <null>  -1026 1029 1030 1031 1032 1033 1034 1048 1049 1050
    <nullify list>     1017 1018-1018-1019
    <nullify object>   1018 1019-1020
    <nullify stmt>      830-1017
    <only list>    468  481 -481 -482
    <only operator>     485 -487 -488 -489
    <only>    481  482 -483 -484 -485 -486
    <operator>     415  436 -442 -443 -444
    <opt accel init list>   1529-1719 1720-1720
    <opt accel list>   1488 1489 1490 1491 1492 1493 1494 1495 1496 1497
                       1498 1499 1500 1511 1513 1517 1519 1520 1533 1535
                      -1541-1542
    <opt accel shutdown list>    1530-1729 1730-1730
    <opt aif label>     848 -849 -850
    <opt atomic type>  1244-1329-1330-1331-1332-1333-1334
    <opt attr list>     112 -364 -365
    <opt attr>      88   91   92   93  107  109  110  111  113  114  115
                   116  125  126  127  130  134  136  137  142  147 -244
                  -245  522  526  550  621
    <opt binding attr list>  551 -554 -555
    <opt chunk>   1407-1408-1409
    <opt comma>    565  599  600  601  602  603  604  605  606  607  608
                  -639 -640  945  948  949 1328 1336 1338 1342 1343 1349
                  1350 1393 1426 1441 1542 1543 1627 1661 1720 1725 1730
    <opt csident> 1235 1236-1325-1326
    <opt derived type spec>  212  213 -629 -630
    <opt distchunk>    1382-1410-1411
    <opt end accel list>    1502-1625-1626
    <opt endsingle list>    1238-1341-1342
    <opt expression>   1358-1389-1390
    <opt gen access spec>    613 -614 -615
    <opt ident>     75   76   77   78   79   80   81  -82  -83  108
    <opt import>   128 -521 -522
    <opt interface name>     551 -552 -553
    <opt len spec>       67  210  217 -228 -229 -230  253  254  254  426
                        427  427
    <opt mask expr>     950 -956 -957
    <opt nowait>  1240 1252 1258 1272-1327-1328
    <opt ordered list> 1255-1391-1392
    <opt par ifclause> 1270-1425-1426
    <opt par list>     1225 1233 1237 1239 1245 1246 1248 1250 1259 1261
                       1266 1268 1271 1273 1275 1277 1278 1279 1280 1282
                       1284 1286 1288 1290 1292 1294 1296 1298 1300 1302
                       1304 1306 1308 1310 1312 1314 1316 1318 1320-1348
                      -1349
    <opt proc attr>     527 -531 -532
    <opt red init>      646 -651 -652 -653
    <opt stride>   683  711 -735 -736  955
    <opt sub>      596  596  711  711 -733 -734  757  757  758  758 1650
                  1650
    <opt tpsl>     107 -625 -626
    <opt type spec>     107 -402 -403
    <opt update list>  1653 1654 1655 1656 1657-1658-1659
    <opt wait list>    1515-1679-1680 1681-1681
    <optional comma>     87 -242 -243  280  281  282  310  325  326  331
                        840  847 1044 1046 1117
    <ordered attr>     1393 1394-1395-1396-1397
    <ordered list>     1392 1393-1393-1394
    <output item> 1126 1127 1128-1129-1130
    <output list> 1036 1038 1044 1048 1126-1126 1127-1127-1128 1130
    <par attr>    1350 1351-1352-1353-1354-1355-1356-1357-1358-1359-1360
                 -1361-1362-1363-1364-1365-1366-1367-1368-1369-1370-1371
                 -1372-1373-1374-1375-1376-1377-1378-1379-1380-1381-1382
                 -1383-1384-1385-1386-1387-1388
    <par begin>   1233-1347
    <par ifclause>     1360-1421-1422-1423-1424 1426
    <par list>    1230 1349 1350-1350-1351
    <paralleldo begin> 1246-1454
    <parallelsections begin>     1248-1455
    <pardosimd begin>  1292-1471
    <parworkshare begin>    1259-1457
    <pause stmt>   824 -881
    <pdo begin>   1239-1451
    <pdt param list>    929  930 -930 -931
    <pdt param>    930  931 -932 -933 -934 -935 -936 -937
    <pdt>     927 -929
    <pflsr list>  1354 1398-1398-1399 1400 1401 1402 1412 1413 1429 1430
                  1434 1435 1436
    <pgi begin>   1538-1540
    <pgi compare dir>  1538-1734
    <pgm>     -22   87   88   89   90   91   92   95   96   98  100  102
              107  109  110  111  112  113  114  115  116  119  125  126
              128  129  134  136  137  142  145  147  213  214  433  434
    <pointer assignment>     829-1016 1022
    <post seq_cst>     1330 1331 1332 1333-1337-1338
    <pragma declaration>     124 -507 -508 -509 -510
    <pragma stmt>  834-1023-1024-1025
    <pre seq_cst> 1330 1331 1332 1333-1335-1336
    <prefix spec>   48   49  -49  -50   63   64   65   65
    <prefix>   49   50  -51  -52  -53  -54  -55  -56  -57  -58
    <primary>      654 -666 -667 -668 -669 -670 -671  776  778  780  781
                   800
    <print spec>  1037 1038-1116
    <private list>     1353-1400
    <proc attr list>    532  533 -533 -534
    <proc attr>    533  534 -535 -536 -537 -538 -539 -540 -541 -542 -543
                  -544
    <proc dcl list>     526  545 -545 -546
    <proc dcl>     545  546 -547 -548 -549
    <proc interf>  527 -528 -529 -530
    <procedure declaration>  132 -526
    <procedure stmt>    121 -464 -465
    <procedure>    526 -527
    <prog title>     4  -24  -25  -26  -27  -28  -29  -30  -31  -32
    <psfunc>  838  838 -839 1016 1016
    <ptr assoc>    356  357 -358 -359
    <ptr list>     110  356 -356 -357
    <quiet clause>     -876  878
    <range list>   269  270  271 -271 -272
    <range>   271  272 -273 -274
    <read spec2>  1040-1118-1119
    <read spec3>  1041 1043-1120
    <read spec4>  1042-1121
    <read>  -1028 1039 1040 1041 1042 1043 1046 1047
    <record dcl>   323  324 -325 -326
    <record list>  102  319 -319 -320
    <record namelist>   321  323 -323 -324
    <record>  319  320 -321
    <red comb>     646 -649 -650
    <reduc op>     646 1412-1414-1415-1416-1417-1418-1419-1420
    <reduction>   1359-1412-1413 1591
    <reflabel>     713  714  842  843 -844  846  848  848  850  870  871
                   884  890 1058 1094 1099
    <rel operand>  795  799  799 -800 -801 -802 -803 -804
    <relation>     663  796 -799
    <relop>   454  799 -805 -806 -807 -808 -809 -810
    <rename list>  467  475 -475 -476
    <rename operator>   478  478 -479 -480
    <rename>  475  476 -477 -478
    <repeat factor>    1148 1153 1154-1157-1158
    <return>  821 -873 -874
    <routine id list>   144 -205  206 -206
    <routine id>    24   25   26  -43  -44  -45  -46
    <save id>      284  285 -286 -287
    <save list>     93  284 -284 -285
    <scale factor>     1155-1159-1160
    <sched type>  1403-1406-1407
    <schedule>    1357-1403-1404-1405
    <sections begin>   1250-1456
    <select type stmt>  909 -916 -917
    <seq cst>     1334 1336 1338-1339
    <seq>     145 -417 -418
    <simd begin>  1273-1460
    <simple stmt>    7 -815 -816 -817 -818 -819 -820 -821 -822 -823 -824
                  -825 -826 -827 -828 -829 -830 -831 -832 -833 -834 -835
                  -836 -837  889
    <single begin>     1237-1450
    <smp stmt>     833-1231
    <spec item>   1064 1065-1066-1067-1068-1069-1070-1071-1072-1073-1074
                 -1075-1076-1077-1078-1079-1080-1081-1082-1083-1084-1085
                 -1086-1087-1088-1089-1090-1091-1092-1093-1094-1095-1096
                 -1097-1098-1099-1100-1101-1102-1103-1104-1105-1106-1107
                 -1108-1109-1110-1111
    <spec list>   1032 1033 1034 1049 1064-1064-1065 1117 1118 1125
    <ssa list>     303  351  650  653  695  701  707 -707 -708  858  983
                   986
    <ssa>     707  708 -709 -710 -711 -712 -713 -714
    <star repeat> 1223-1224
    <statement>      1   -4   -5   -6   -7   -8   -9  -10  -11  -12  -13
                   -14  -15  -16  -17  -18
    <stbeg>     1   -2
    <stend>     1   -3
    <stmt>      0   -1
    <stop pause>   875  881 -882 -883
    <stop stmt>    823 -875
    <struct begin1>     100 -311 -312
    <struct begin2>     100 -313 -314
    <struct name>  321 -322
    <subr prefix>   43   44  -47  -48
    <substring>    353  671 -757 -758
    <target begin>     1280-1464
    <target list>  116  428 -428 -429
    <target>  428  429 -430
    <targetdata begin> 1275-1461
    <targetenterdata begin> 1277-1462
    <targetexitdata begin>  1278-1463
    <targetupdate begin>    1279-1465
    <targpar begin>    1294-1472
    <targpardo begin>  1296-1473
    <targpardosimd begin>   1300-1475
    <targparsimd begin>     1298-1474
    <targsimd begin>   1302-1476
    <targteams begin>  1304-1477
    <targteamsdist begin>   1310-1480
    <targteamsdistpardo begin>   1316-1483
    <targteamsdistpardosimd begin>    1320-1485
    <targteamsdistsimd begin>    1312-1481
    <task begin>  1261-1458
    <taskloop begin>   1266-1486
    <taskloopsimd begin>    1268-1487
    <teams begin> 1282-1466
    <teamsdist begin>  1306-1478
    <teamsdistpardo begin>  1314-1482
    <teamsdistpardosimd begin>   1318-1484
    <teamsdistsimd begin>   1308-1479
    <term>    760  761 -768 -769  770  771  772
    <tkr id list>  512  513 -513 -514
    <tkr id>  513  514 -515
    <tkr spec>     515 -516 -517
    <tp item>      490  491 -492 -493
    <tp list>      122  490 -490 -491 1346
    <tprocedure>   550 -551
    <tpv>     232 -233 -234 -235  236  238  239  239  241
    <typdcl item>  246  247 -248 -249 -250
    <typdcl list>   87  246 -246 -247
    <type attr list>    403  404 -404 -405
    <type attr>    404  405 -406 -407 -408 -409
    <type bound procedure>   133 -550
    <type guard stmt>   910 -920 -921 -922
    <type list>    646  647 -647 -648
    <type name>    926 -928  929
    <type param decl list>   630 -631  632 -632
    <type param spec list>   626  627 -627 -628
    <type param value>  631  632 -633 -634 -635 -636 -637 -638
    <type spec>   -215 -216  677  678  978
    <typeis stmt>  920 -923
    <typespec>     923 -924 -925  938
    <uniform clause>   1372-1436
    <unit data list>   1052 1054-1054-1055-1056
    <unit data>   1054 1055 1056-1057-1058-1059-1060-1061 1066
    <unit id>     1051 1053 1055 1057-1062-1063
    <unit info>   1029 1030 1031 1050-1051-1052-1053
    <unlimited format item> 1143 1145 1146-1223
    <use>     119 -466 -467 -468 -469
    <var primary ssa>   700  701 -705  857  858
    <var primary>  702  703  704  705 -706  859  860  861
    <var ref list>      692 -692 -693 1023 1445 1446 1447
    <var ref>      666  685  692  693 -699 -700 -701 -702 -703 -704  706
                   838  846  945  955  991  992  993 1016 1020 1048 1059
                  1060 1061 1076 1077 1078 1083 1084 1085 1086 1087 1088
                  1089 1090 1091 1102 1103 1105 1110 1123 1133
    <vol id>  327  328 -329 -330
    <vol list>     109  327 -327 -328
    <vxeqc list>    98  291 -291 -292
    <wait item>   1681-1682-1683-1684-1685
    <where clause>      831  898 -971
    <where construct>   971 -972 -973
    <write> -1027 1035 1036 1037 1038 1044 1045

